{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-icarus/source/css/cyberpunk.styl","path":"css/cyberpunk.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/css/default.styl","path":"css/default.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/favicon.svg","path":"img/favicon.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/og_image.png","path":"img/og_image.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-bottom-black.svg","path":"img/razor-bottom-black.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/logo.svg","path":"img/logo.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-top-black.svg","path":"img/razor-top-black.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/animation.js","path":"js/animation.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/back_to_top.js","path":"js/back_to_top.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/column.js","path":"js/column.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/logo.png","path":"logo.png","modified":1,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"source/donates/alipay.jpg","path":"donates/alipay.jpg","modified":1,"renderable":0},{"_id":"source/covers/GOSTBLADE3.jpg","path":"covers/GOSTBLADE3.jpg","modified":1,"renderable":0},{"_id":"source/donates/wechat.jpg","path":"donates/wechat.jpg","modified":1,"renderable":0},{"_id":"source/covers/GOSTBLADE1.jpg","path":"covers/GOSTBLADE1.jpg","modified":1,"renderable":0},{"_id":"source/covers/GOSTBLADE2.png","path":"covers/GOSTBLADE2.png","modified":1,"renderable":0},{"_id":"source/images/MESA.jpg","path":"images/MESA.jpg","modified":1,"renderable":0},{"_id":"source/images/docker-cli1.png","path":"images/docker-cli1.png","modified":1,"renderable":0},{"_id":"source/images/docker.png","path":"images/docker.png","modified":1,"renderable":0},{"_id":"source/images/es-doc-client-deleteSuccess.png","path":"images/es-doc-client-deleteSuccess.png","modified":1,"renderable":0},{"_id":"source/images/es-doc-client-updateSuccess.png","path":"images/es-doc-client-updateSuccess.png","modified":1,"renderable":0},{"_id":"source/images/es-doc-client-getByIdSucces.png","path":"images/es-doc-client-getByIdSucces.png","modified":1,"renderable":0},{"_id":"source/images/es-doc-client-bulkSuccess.png","path":"images/es-doc-client-bulkSuccess.png","modified":1,"renderable":0},{"_id":"source/images/es-doc-cliten-addSuccess.png","path":"images/es-doc-cliten-addSuccess.png","modified":1,"renderable":0},{"_id":"source/images/mail-success-1.png","path":"images/mail-success-1.png","modified":1,"renderable":0},{"_id":"source/images/spring-mail-success.png","path":"images/spring-mail-success.png","modified":1,"renderable":0},{"_id":"source/images/z-chat-1-demand.png","path":"images/z-chat-1-demand.png","modified":1,"renderable":0},{"_id":"source/live2d_models/live2d-widget-model-hijiki/assets/mtn/02.mtn","path":"live2d_models/live2d-widget-model-hijiki/assets/mtn/02.mtn","modified":1,"renderable":0},{"_id":"source/live2d_models/live2d-widget-model-hijiki/assets/mtn/03.mtn","path":"live2d_models/live2d-widget-model-hijiki/assets/mtn/03.mtn","modified":1,"renderable":0},{"_id":"source/live2d_models/live2d-widget-model-hijiki/assets/mtn/00_idle.mtn","path":"live2d_models/live2d-widget-model-hijiki/assets/mtn/00_idle.mtn","modified":1,"renderable":0},{"_id":"source/live2d_models/live2d-widget-model-hijiki/assets/mtn/01.mtn","path":"live2d_models/live2d-widget-model-hijiki/assets/mtn/01.mtn","modified":1,"renderable":0},{"_id":"source/live2d_models/live2d-widget-model-hijiki/assets/mtn/05.mtn","path":"live2d_models/live2d-widget-model-hijiki/assets/mtn/05.mtn","modified":1,"renderable":0},{"_id":"source/live2d_models/live2d-widget-model-hijiki/assets/mtn/04.mtn","path":"live2d_models/live2d-widget-model-hijiki/assets/mtn/04.mtn","modified":1,"renderable":0},{"_id":"source/live2d_models/live2d-widget-model-hijiki/assets/mtn/08.mtn","path":"live2d_models/live2d-widget-model-hijiki/assets/mtn/08.mtn","modified":1,"renderable":0},{"_id":"source/live2d_models/live2d-widget-model-hijiki/assets/mtn/06.mtn","path":"live2d_models/live2d-widget-model-hijiki/assets/mtn/06.mtn","modified":1,"renderable":0},{"_id":"source/live2d_models/live2d-widget-model-hijiki/assets/mtn/07.mtn","path":"live2d_models/live2d-widget-model-hijiki/assets/mtn/07.mtn","modified":1,"renderable":0},{"_id":"source/live2d_models/live2d-widget-model-hijiki/assets/moc/hijiki.moc","path":"live2d_models/live2d-widget-model-hijiki/assets/moc/hijiki.moc","modified":1,"renderable":0},{"_id":"source/live2d_models/live2d-widget-model-hijiki/assets/moc/hijiki.2048/texture_00.png","path":"live2d_models/live2d-widget-model-hijiki/assets/moc/hijiki.2048/texture_00.png","modified":1,"renderable":0}],"Cache":[{"_id":"node_modules/hexo-theme-icarus/layout/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1653010930855},{"_id":"node_modules/hexo-theme-icarus/layout/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1653010930913},{"_id":"node_modules/hexo-theme-icarus/layout/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1653010930966},{"_id":"node_modules/hexo-theme-icarus/layout/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1653010931012},{"_id":"node_modules/hexo-theme-icarus/layout/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1653010931057},{"_id":"node_modules/hexo-theme-icarus/include/schema/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1653010929896},{"_id":"node_modules/hexo-theme-icarus/include/schema/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1653010930533},{"_id":"node_modules/hexo-theme-icarus/include/schema/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1653010930687},{"_id":"node_modules/hexo-theme-icarus/include/schema/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1653010930218},{"_id":"node_modules/hexo-theme-icarus/include/schema/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1653010930797},{"_id":"node_modules/hexo-theme-icarus/package.json","hash":"fd7a0fb16814221652b0d2dbf82619db56e78dab","modified":1653010931461},{"_id":"node_modules/hexo-theme-icarus/include/config.js","hash":"1ff0f174e9670074ad2bee890d5b6da486800c9a","modified":1653010931201},{"_id":"node_modules/hexo-theme-icarus/languages/de.yml","hash":"78421f09961ca0b24756a0688fb2cb2e2696e25f","modified":1653010931834},{"_id":"node_modules/hexo-theme-icarus/include/dependency.js","hash":"d30dbcefd58619f6705d6369b644bc7ba44d2421","modified":1653010931240},{"_id":"node_modules/hexo-theme-icarus/include/register.js","hash":"a974b56a1fbb254f1ae048cc2221363faaccec25","modified":1653010931316},{"_id":"node_modules/hexo-theme-icarus/languages/en.yml","hash":"3d674204d9f723c829226da745afddd180c1131d","modified":1653010931839},{"_id":"node_modules/hexo-theme-icarus/languages/fr.yml","hash":"06d5c819d6108a42b28cff7b52e5410d0bed55d1","modified":1653010931849},{"_id":"node_modules/hexo-theme-icarus/languages/es.yml","hash":"38579b8fad4b6997362acc770615bcd85ff20f68","modified":1653010931843},{"_id":"node_modules/hexo-theme-icarus/languages/ja.yml","hash":"801d9930fef48d6a3f80470d5bed4f3eb78147e6","modified":1653010931859},{"_id":"node_modules/hexo-theme-icarus/languages/id.yml","hash":"5e48b1d62378cadeb64b88349477726a5c1bae47","modified":1653010931854},{"_id":"node_modules/hexo-theme-icarus/languages/ko.yml","hash":"e3374265377809c1518114cf352b595840c0b416","modified":1653010931863},{"_id":"node_modules/hexo-theme-icarus/languages/pt-BR.yml","hash":"ee8f73350e4c6e2f63b7fc72b34472a6b1e21244","modified":1653010931873},{"_id":"node_modules/hexo-theme-icarus/languages/pl.yml","hash":"2e7debb44cd91096f30efc87bf8d6b1d0d0214c9","modified":1653010931868},{"_id":"node_modules/hexo-theme-icarus/languages/tk.yml","hash":"ca583168bd2025124a1cd0e977da475d7a7496fd","modified":1653010931882},{"_id":"node_modules/hexo-theme-icarus/languages/ru.yml","hash":"9d91358c2acbe7a0f2a25daf7f65b999ff32d068","modified":1653010931877},{"_id":"node_modules/hexo-theme-icarus/languages/tr.yml","hash":"dd0a7bfe14848d6e1aa229198fe1db03e08e305e","modified":1653010931888},{"_id":"node_modules/hexo-theme-icarus/CONTRIBUTING.md","hash":"70254c6778c1e41bb2ff222bbf3a70b2239b9bc1","modified":1653010931674},{"_id":"node_modules/hexo-theme-icarus/LICENSE","hash":"86037e5335a49321fa73b7815cab542057fac944","modified":1653010931084},{"_id":"node_modules/hexo-theme-icarus/README.md","hash":"32f9f4fc8cd7ec60b30544bd2e558b593519ae5d","modified":1653010931681},{"_id":"node_modules/hexo-theme-icarus/languages/vn.yml","hash":"5f2fffa642110c81d8f529949711c9d19ad6bbbe","modified":1653010931892},{"_id":"node_modules/hexo-theme-icarus/languages/zh-CN.yml","hash":"02475ba14afc70dfeaf5678467cee307835e4efa","modified":1653010931898},{"_id":"node_modules/hexo-theme-icarus/layout/index.jsx","hash":"0a84a2348394fa9fc5080dd396bd28d357594f47","modified":1653010931597},{"_id":"node_modules/hexo-theme-icarus/layout/category.jsx","hash":"fd15e4eac32de9ac8687aeb3dbe179ab61375700","modified":1653010931567},{"_id":"node_modules/hexo-theme-icarus/layout/layout.jsx","hash":"ac7c4e3465a116c7f05f8c2e09ee6d6b9467abf1","modified":1653224844319},{"_id":"node_modules/hexo-theme-icarus/layout/archive.jsx","hash":"05677e93d4a43f417dbbf0d63ca37a99e6349e3b","modified":1653010931541},{"_id":"node_modules/hexo-theme-icarus/layout/categories.jsx","hash":"b8ad43e28a4990d222bfbb95b032f88555492347","modified":1653010931561},{"_id":"node_modules/hexo-theme-icarus/scripts/index.js","hash":"0c666db6fcb4ffc4d300f4e108c00ee42b1cbbe6","modified":1653010931284},{"_id":"node_modules/hexo-theme-icarus/languages/zh-TW.yml","hash":"a6826e0c8cdb9ad286324b682b466a9e2ad78e6f","modified":1653010931902},{"_id":"node_modules/hexo-theme-icarus/layout/page.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1653010931615},{"_id":"node_modules/hexo-theme-icarus/layout/tags.jsx","hash":"2c42cb64778235dd220c563a27a92108ddc50cc4","modified":1653010931663},{"_id":"node_modules/hexo-theme-icarus/layout/post.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1653010931626},{"_id":"node_modules/hexo-theme-icarus/include/util/console.js","hash":"59cf9d277d3ac85a496689bd811b1c316001641d","modified":1653010931223},{"_id":"node_modules/hexo-theme-icarus/layout/tag.jsx","hash":"d2f18cac32ca2725d34ccff3f2051c623be6c892","modified":1653010931658},{"_id":"node_modules/hexo-theme-icarus/include/migration/head.js","hash":"269ba172013cbd2f10b9bc51af0496628081329b","modified":1653010931262},{"_id":"node_modules/hexo-theme-icarus/include/migration/v3_v4.js","hash":"9faf2184d7fe87debfbe007f3fc9079dcbcafcfe","modified":1653010931340},{"_id":"node_modules/hexo-theme-icarus/include/style/article.styl","hash":"105c983871b6c9148d97a0f756886e56411572bd","modified":1653010931710},{"_id":"node_modules/hexo-theme-icarus/include/style/base.styl","hash":"2bca6ad099949d52236c87db8db1002ffb99774c","modified":1653010931715},{"_id":"node_modules/hexo-theme-icarus/include/style/button.styl","hash":"0fb35b4786be1b387c751fa2849bc71523fcedd4","modified":1653010931720},{"_id":"node_modules/hexo-theme-icarus/include/style/codeblock.styl","hash":"30bee4cf6792e9665eb648cc20b352d9eaff1207","modified":1653010931731},{"_id":"node_modules/hexo-theme-icarus/include/style/footer.styl","hash":"a4ad715dee38b249538ac6cce94efc9b355a904b","modified":1653010931758},{"_id":"node_modules/hexo-theme-icarus/include/style/donate.styl","hash":"8d0af00628c13134b5f30a558608e7bebf18c2ec","modified":1653010931753},{"_id":"node_modules/hexo-theme-icarus/include/style/card.styl","hash":"f78674422eb408cd17c17bbdc3ee1ebe4a453e05","modified":1653010931725},{"_id":"node_modules/hexo-theme-icarus/include/style/helper.styl","hash":"9f3393e6122cc9f351091bfab960674e962da343","modified":1653010931764},{"_id":"node_modules/hexo-theme-icarus/include/style/navbar.styl","hash":"ecc73c8ad504c0fa4bb910eb51500c14e0a8d662","modified":1653010931769},{"_id":"node_modules/hexo-theme-icarus/include/style/plugin.styl","hash":"679b61b5fc5b3281735a21c37aeb64229d9c51ea","modified":1653010931780},{"_id":"node_modules/hexo-theme-icarus/include/style/pagination.styl","hash":"b81bcd7ff915b4e9299533addc01bc4575ec35e3","modified":1653010931774},{"_id":"node_modules/hexo-theme-icarus/include/style/search.styl","hash":"416737e1da4e7e907bd03609b0fee9e2aacfe56c","modified":1653010931790},{"_id":"node_modules/hexo-theme-icarus/include/schema/config.json","hash":"ac633f9d349bca4f089d59d2c3738b57376f1b31","modified":1653010931416},{"_id":"node_modules/hexo-theme-icarus/include/style/widget.styl","hash":"c746902251136544eb3fe523235b3183f4189460","modified":1653010931806},{"_id":"node_modules/hexo-theme-icarus/include/style/responsive.styl","hash":"207083fe287612cddee6608b541861b14ac8de81","modified":1653010931785},{"_id":"node_modules/hexo-theme-icarus/include/style/timeline.styl","hash":"ea61798a09bffdda07efb93c2ff800b63bddc4c4","modified":1653010931800},{"_id":"node_modules/hexo-theme-icarus/layout/common/article.jsx","hash":"e2765287c6bc6eb97975a1bb4e325b046e95b392","modified":1653010931550},{"_id":"node_modules/hexo-theme-icarus/include/migration/v2_v3.js","hash":"3ccb2d2ce11018bebd7172da66faecc3983bff00","modified":1653010931328},{"_id":"node_modules/hexo-theme-icarus/layout/common/comment.jsx","hash":"427089c33002707b76e2f38709459a6824fd0f9b","modified":1653010931573},{"_id":"node_modules/hexo-theme-icarus/layout/common/donates.jsx","hash":"889fb0a7ccc502f0a43b4a18eb330e351e50493c","modified":1653010931579},{"_id":"node_modules/hexo-theme-icarus/layout/common/footer.jsx","hash":"baa8e40e036a3ec0114d96893b708435104b4ba9","modified":1653010931585},{"_id":"node_modules/hexo-theme-icarus/layout/common/navbar.jsx","hash":"fcd9fd4624dee49207ef09ea2a1c63f524f3710c","modified":1653010931610},{"_id":"node_modules/hexo-theme-icarus/layout/common/head.jsx","hash":"2ec1f511f32e3a9c86d49f1338f57ae5ece18898","modified":1653010931591},{"_id":"node_modules/hexo-theme-icarus/layout/common/plugins.jsx","hash":"f6826c1a5f5f59f4a0aa00c63bdb0ad4ff4eab69","modified":1653010931621},{"_id":"node_modules/hexo-theme-icarus/layout/common/scripts.jsx","hash":"0fe1fddab431fb9f63906d8c480d5cd6b33abc32","modified":1653010931640},{"_id":"node_modules/hexo-theme-icarus/layout/common/search.jsx","hash":"6f244a37293031670a2964fe424ecd062e591d7b","modified":1653010931646},{"_id":"node_modules/hexo-theme-icarus/layout/common/share.jsx","hash":"c9fb0319ad5e5a10ad3636b26a6c2afed14c590f","modified":1653010931653},{"_id":"node_modules/hexo-theme-icarus/layout/common/widgets.jsx","hash":"251263b97de12f2b8d1fce2514e83430f2515b94","modified":1653224807386},{"_id":"node_modules/hexo-theme-icarus/source/css/default.styl","hash":"b01da3028e5a1267a40aaae5c86a11187a2259e3","modified":1653010931747},{"_id":"node_modules/hexo-theme-icarus/layout/plugin/animejs.jsx","hash":"e2aa27c3501a58ef1e91e511557b77395c2c02aa","modified":1653010931531},{"_id":"node_modules/hexo-theme-icarus/layout/plugin/back_to_top.jsx","hash":"7fc0c5aaabd7d0eaff04cb68ec139442dc3414e8","modified":1653010931556},{"_id":"node_modules/hexo-theme-icarus/layout/widget/profile.jsx","hash":"0d3a7fd922c12cc45d2c8d26a8f4d3a9a6ed0ae0","modified":1653010931634},{"_id":"node_modules/hexo-theme-icarus/source/css/style.styl","hash":"5b9815586e993a6ccbe8cdcfc0c65ea38fc315ac","modified":1653010931795},{"_id":"node_modules/hexo-theme-icarus/source/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1653010931812},{"_id":"node_modules/hexo-theme-icarus/source/css/cyberpunk.styl","hash":"ae17d3528df0c3f089df14a06b7bd82f1bc5fed9","modified":1653010931742},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1653010931822},{"_id":"node_modules/hexo-theme-icarus/source/img/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1653010931692},{"_id":"node_modules/hexo-theme-icarus/source/js/animation.js","hash":"12cedd5caaf9109eed97e50eeab8f883f6e49be3","modified":1653010931122},{"_id":"node_modules/hexo-theme-icarus/source/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1653010931816},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1653010931828},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/article.json","hash":"e2502c39045c6a26ccd8e880858f93e78c7bda35","modified":1653010931378},{"_id":"node_modules/hexo-theme-icarus/source/js/column.js","hash":"0baee024ab67474c073a4c41b495f3e7f0df4505","modified":1653010931171},{"_id":"node_modules/hexo-theme-icarus/source/js/main.js","hash":"13e4b1c4fa287f3db61aae329ad093a81992f23d","modified":1653010931303},{"_id":"node_modules/hexo-theme-icarus/source/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1653010931703},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/comment.json","hash":"7d744391a8abee9a2c450b6fdd36a3866a488025","modified":1653010931403},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/footer.json","hash":"09d706cbb94d6da9a0d15c719ce7139325cae1c7","modified":1653010931435},{"_id":"node_modules/hexo-theme-icarus/source/js/back_to_top.js","hash":"d91f10c08c726135a13dfa1f422c49d8764ef03f","modified":1653010931145},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/donates.json","hash":"ae86e6f177bedf4afbe638502c12635027539305","modified":1653010931425},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/navbar.json","hash":"6691e587284c4cf450e0288680d5ff0f3565f090","modified":1653010931452},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/head.json","hash":"98889f059c635e6bdbd51effd04cf1cf44968a66","modified":1653010931443},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/providers.json","hash":"97ec953d497fb53594227ae98acaef8a8baa91da","modified":1653010931488},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/search.json","hash":"985fbcbf47054af714ead1a124869d54f2a8b607","modified":1653010931496},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/plugins.json","hash":"6036a805749816416850d944f7d64aaae62e5e75","modified":1653010931468},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/sidebar.json","hash":"eb241beaec4c73e3085dfb3139ce72e827e20549","modified":1653010931511},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/widgets.json","hash":"cadd9dc942740ecd5037d3943e72f8b6a8399bbe","modified":1653010931518},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/share.json","hash":"cf4f9ff4fb27c3541b35f57db355c228fa6873e4","modified":1653010931503},{"_id":"node_modules/hexo-theme-icarus/include/schema/widget/profile.json","hash":"690ee1b0791cab47ea03cf42b5b4932ed2aa5675","modified":1653010931480},{"_id":"node_modules/hexo-theme-icarus/include/schema/plugin/animejs.json","hash":"e62ab6e20bd8862efa1ed32e7c0db0f8acbcfdec","modified":1653010931359},{"_id":"node_modules/hexo-theme-icarus/include/schema/plugin/back_to_top.json","hash":"dc0febab7e7b67075d0ad3f80f5ec8b798b68dea","modified":1653010931390},{"_id":"source/favicon.ico","hash":"952287196576176ac13b321c3639341989bd4c68","modified":1652964946935},{"_id":"source/CNAME","hash":"7982e6ca1a5d4054546834033deb5ba15e206f11","modified":1653006670076},{"_id":"source/robots.txt","hash":"1f7f1755a3558dce3f2d2f8fea064784caefabae","modified":1653282207220},{"_id":"source/logo.png","hash":"c72b4836ba1bb4954638a6ebeaef4abf7b7b6ca7","modified":1653012929020},{"_id":"source/_posts/docker-cli-1.md","hash":"8d4ea29b097ba28ecb302fbd796e870597df2713","modified":1653267163357},{"_id":"source/_posts/z-chat-1.md","hash":"fe4d52e9e94462ad20e3785aba0579c74bcac544","modified":1657084852326},{"_id":"source/_posts/spring-boot-starter-mail.md","hash":"e9eab9417143b5134fa9762e6439660c35b0990f","modified":1657085920558},{"_id":"source/_posts/elasticsearch-java.md","hash":"4c5fecc3228e5f67f8c41c375cc7902c5cc94a85","modified":1657084910917},{"_id":"source/images/docker.png","hash":"b8a5c41e56b77706656d61080f6a0217a3ba356d","modified":1649293684031},{"_id":"source/images/es-doc-client-updateSuccess.png","hash":"e236ff1fee85e2a13312c2af7328402abfb61e5a","modified":1653268963721},{"_id":"source/images/docker-cli1.png","hash":"95147158942c01ccb22e290de2de6fceeffe32d3","modified":1649295216999},{"_id":"source/images/es-doc-client-deleteSuccess.png","hash":"753e898078ada421361d148dd64b419e49427ecd","modified":1653269132384},{"_id":"source/images/mail-success-1.png","hash":"9e162054e4a052fc70c5406cd54db4c8320bb298","modified":1657085817235},{"_id":"source/live2d_models/live2d-widget-model-hijiki/package.json","hash":"0d1c0f7205aa43ec73b60cf93fcf74e09b5392ed","modified":1653548867566},{"_id":"source/images/spring-mail-success.png","hash":"16ae43333a84702e70bb47d013339da698dcacac","modified":1657085697525},{"_id":"source/live2d_models/live2d-widget-model-hijiki/assets/hijiki.model.json","hash":"feff43bf7498d213982c3736c2c029664e4bcbd2","modified":1653548867570},{"_id":"source/images/es-doc-client-getByIdSucces.png","hash":"9c51a7dc036a4217579f81ab2857907d62ccbde0","modified":1653267798372},{"_id":"source/live2d_models/live2d-widget-model-hijiki/assets/hijiki.pose.json","hash":"03eb01709038b3a0f1972cc4e0b1f08c541a7cba","modified":1653549307247},{"_id":"source/images/es-doc-cliten-addSuccess.png","hash":"e026c360d8e263dca4b7d746afeeb5fbb9ba5139","modified":1653267431780},{"_id":"source/live2d_models/live2d-widget-model-hijiki/assets/mtn/02.mtn","hash":"7eafc52edc73b7cb80ae70d34b43c6ac778fa47b","modified":1653548868394},{"_id":"source/live2d_models/live2d-widget-model-hijiki/assets/mtn/00_idle.mtn","hash":"b224c60e463b9f71ddbfc0c720e430496c175f4f","modified":1653548868388},{"_id":"source/live2d_models/live2d-widget-model-hijiki/assets/mtn/03.mtn","hash":"f900737c7a98441cbb2e05255427e6260e19ae68","modified":1653548868401},{"_id":"source/live2d_models/live2d-widget-model-hijiki/assets/mtn/05.mtn","hash":"dd20ad24b5d1830a5d44b9bccb28f922eea5e0e5","modified":1653548868407},{"_id":"source/live2d_models/live2d-widget-model-hijiki/assets/mtn/01.mtn","hash":"fb550833ae22c9954c3e01df37ed29b2d61700f2","modified":1653548868391},{"_id":"source/live2d_models/live2d-widget-model-hijiki/assets/mtn/06.mtn","hash":"ad404bd852d276cdd3d054c953e23f90e4e45ae1","modified":1653548868410},{"_id":"source/live2d_models/live2d-widget-model-hijiki/assets/mtn/04.mtn","hash":"c7a25d3c5d783639bae18db2f3cd284b819c3c85","modified":1653548868404},{"_id":"source/live2d_models/live2d-widget-model-hijiki/assets/mtn/08.mtn","hash":"4411c7651ff65195b113d95e7d5ebef8a59a37d9","modified":1653548868422},{"_id":"source/live2d_models/live2d-widget-model-hijiki/assets/mtn/07.mtn","hash":"b7f2e3a9fa4f3ffbb6e64a08f8d9f45ca1868ffb","modified":1653548868413},{"_id":"source/donates/wechat.jpg","hash":"b0ed0daa9a55366db3cccde18757a893ebd24725","modified":1653284854458},{"_id":"source/images/MESA.jpg","hash":"a6d81d3592b6c4bb7cef451c1764ce162cf7b352","modified":1640866964301},{"_id":"source/images/es-doc-client-bulkSuccess.png","hash":"e285de6843916d0a3f2c14cf0559641db7a33a0c","modified":1653269336994},{"_id":"source/images/z-chat-1-demand.png","hash":"9ba8f5efd714202505789c730a6c7c05f5b25606","modified":1656555561537},{"_id":"source/donates/alipay.jpg","hash":"642ef8e705cf1af8fde7634b71708d8f286eceac","modified":1653284847105},{"_id":"source/live2d_models/live2d-widget-model-hijiki/assets/moc/hijiki.moc","hash":"44289e62545a7046e0f5231103a851750b78524e","modified":1653548868385},{"_id":"source/live2d_models/live2d-widget-model-hijiki/assets/moc/hijiki.2048/texture_00.png","hash":"66464e0d96439695b5542c5e2f5be60739c29999","modified":1653548868222},{"_id":"source/covers/GOSTBLADE1.jpg","hash":"a621a47a4f1899f5be9406fb2d0dacb93f172fc8","modified":1653287575443},{"_id":"source/covers/GOSTBLADE3.jpg","hash":"443e2d420db3af20c28270ab723441d729b988ed","modified":1657084619967},{"_id":"source/covers/GOSTBLADE2.png","hash":"c76016dbf133486544ffa32a2f93d36782f9e224","modified":1656553865738},{"_id":"public/live2d_models/live2d-widget-model-hijiki/package.json","hash":"8f82d1cf92106d059f3a619910e5cc83bb6044d0","modified":1657085956438},{"_id":"public/baidusitemap.xml","hash":"7f90e1ab78cce92e2328661fb783aec722269594","modified":1657085956438},{"_id":"public/live2d_models/live2d-widget-model-hijiki/assets/hijiki.pose.json","hash":"81438bf69b32c7c11e311b4fe043730cdc7b7ec2","modified":1657085956438},{"_id":"public/sitemap.txt","hash":"ba5e1c884b820b366b476124579b0660271f807d","modified":1657085956438},{"_id":"public/sitemap.xml","hash":"c388d6036697aff24bb7db220e21813da9fe37ed","modified":1657085956438},{"_id":"public/live2d_models/live2d-widget-model-hijiki/assets/hijiki.model.json","hash":"feff43bf7498d213982c3736c2c029664e4bcbd2","modified":1657085956438},{"_id":"public/js/google_cse.js","hash":"1a9881669dfdeb2b3214074eee0d3e01e52db2c4","modified":1657085956438},{"_id":"public/js/algolia.js","hash":"a8df0c0abeeb4ee1d2d720161f3aea7339380704","modified":1657085956438},{"_id":"public/content.json","hash":"4dece92f7a328d103e550c5e01247786acb29c78","modified":1657085956438},{"_id":"public/js/insight.js","hash":"86bbdb7305d9bf19ad62d2ca2cf169fc8d9f9d31","modified":1657085956438},{"_id":"public/manifest.json","hash":"d6027aeef9f2f7537ab4add55bffd3954f3d6bdd","modified":1657085956438},{"_id":"public/js/toc.js","hash":"da6fb757a1b083b8ed138bf29aad3a7bf8ec4f11","modified":1657085956438},{"_id":"public/archives/2022/04/index.html","hash":"0752cb997b9018a64fb4ec648fc383e5cc0bd1fc","modified":1657085956438},{"_id":"public/archives/2022/05/index.html","hash":"b37715226e2a0dff3d23e2a13eb8d9d48b00a494","modified":1657085956438},{"_id":"public/archives/2022/06/index.html","hash":"a37a20fb1b9851ebe537bc14e4ca60617d0da0c0","modified":1657085956438},{"_id":"public/archives/2022/07/index.html","hash":"4963be7bf0dffbe040ca42f760ebcfaf036552ed","modified":1657085956438},{"_id":"public/categories/index.html","hash":"f8d0f34bc10d1460aa80b602e44ba845030672ff","modified":1657085956438},{"_id":"public/tags/index.html","hash":"fc9342408232a7884df19389f4ee7699ca19deb5","modified":1657085956438},{"_id":"public/spring-boot-starter-mail/index.html","hash":"62b444ffef9f357ab9372eecf7ad42d8355394fc","modified":1657085956438},{"_id":"public/z-chat-1/index.html","hash":"5a563a50963ea2cf953bc67ec2d3ab9835c6f5ee","modified":1657085956438},{"_id":"public/elasticsearch-java/index.html","hash":"65ab83da87ec56c70626de319744fa469aa6ab35","modified":1657085956438},{"_id":"public/docker-cli-1/index.html","hash":"02bdbecbbb9ebbe5f447ecc4796b98ec3d9746e4","modified":1657085956438},{"_id":"public/archives/index.html","hash":"cfea132cab6b25e4e06faf988a2ab373689214b5","modified":1657085956438},{"_id":"public/archives/2022/index.html","hash":"7496812d77aac39913009fbfe6611b9bcdb1bcd7","modified":1657085956438},{"_id":"public/index.html","hash":"9cd87fb15ea70d0bbd250c08bc77b027304828e4","modified":1657085956438},{"_id":"public/categories/project/index.html","hash":"81b08d567186559eea71881ce4a287d6f99ba6ad","modified":1657085956438},{"_id":"public/categories/java/index.html","hash":"8323e2ad8cfec2d8badbdd8c089db88608241a22","modified":1657085956438},{"_id":"public/categories/docker/index.html","hash":"a0609f106322a7ea2524714c2ff96a078e350404","modified":1657085956438},{"_id":"public/tags/运维/index.html","hash":"a10fe5937a2ad799ecd3e466d0fe419a7a3e1afc","modified":1657085956438},{"_id":"public/tags/elasticsearch/index.html","hash":"e74253d36167b449f9434101e1ec7dcddc0a492e","modified":1657085956438},{"_id":"public/tags/springboot/index.html","hash":"b86cc4f2973d6509eb99dbcc9691702df781ae29","modified":1657085956438},{"_id":"public/tags/项目/index.html","hash":"722ac8dc40d3abb81a08f08750e8975c515f65a6","modified":1657085956438},{"_id":"public/img/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1657085956438},{"_id":"public/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1657085956438},{"_id":"public/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1657085956438},{"_id":"public/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1657085956438},{"_id":"public/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1657085956438},{"_id":"public/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1657085956438},{"_id":"public/CNAME","hash":"7982e6ca1a5d4054546834033deb5ba15e206f11","modified":1657085956438},{"_id":"public/favicon.ico","hash":"952287196576176ac13b321c3639341989bd4c68","modified":1657085956438},{"_id":"public/logo.png","hash":"c72b4836ba1bb4954638a6ebeaef4abf7b7b6ca7","modified":1657085956438},{"_id":"public/robots.txt","hash":"1f7f1755a3558dce3f2d2f8fea064784caefabae","modified":1657085956438},{"_id":"public/images/docker-cli1.png","hash":"95147158942c01ccb22e290de2de6fceeffe32d3","modified":1657085956438},{"_id":"public/images/es-doc-client-deleteSuccess.png","hash":"753e898078ada421361d148dd64b419e49427ecd","modified":1657085956438},{"_id":"public/images/docker.png","hash":"b8a5c41e56b77706656d61080f6a0217a3ba356d","modified":1657085956438},{"_id":"public/images/es-doc-client-updateSuccess.png","hash":"e236ff1fee85e2a13312c2af7328402abfb61e5a","modified":1657085956438},{"_id":"public/images/es-doc-client-getByIdSucces.png","hash":"9c51a7dc036a4217579f81ab2857907d62ccbde0","modified":1657085956438},{"_id":"public/images/es-doc-cliten-addSuccess.png","hash":"e026c360d8e263dca4b7d746afeeb5fbb9ba5139","modified":1657085956438},{"_id":"public/images/spring-mail-success.png","hash":"16ae43333a84702e70bb47d013339da698dcacac","modified":1657085956438},{"_id":"public/images/mail-success-1.png","hash":"9e162054e4a052fc70c5406cd54db4c8320bb298","modified":1657085956438},{"_id":"public/js/animation.js","hash":"12cedd5caaf9109eed97e50eeab8f883f6e49be3","modified":1657085956438},{"_id":"public/js/back_to_top.js","hash":"d91f10c08c726135a13dfa1f422c49d8764ef03f","modified":1657085956438},{"_id":"public/js/column.js","hash":"0baee024ab67474c073a4c41b495f3e7f0df4505","modified":1657085956438},{"_id":"public/js/main.js","hash":"13e4b1c4fa287f3db61aae329ad093a81992f23d","modified":1657085956438},{"_id":"public/css/style.css","hash":"49786c0fefcaa20821d9853a4a6ca81904322793","modified":1657085956438},{"_id":"public/css/cyberpunk.css","hash":"073797b87e28376604d586c48beb66f6fe9cb504","modified":1657085956438},{"_id":"public/css/default.css","hash":"49786c0fefcaa20821d9853a4a6ca81904322793","modified":1657085956438},{"_id":"public/live2d_models/live2d-widget-model-hijiki/assets/mtn/03.mtn","hash":"f900737c7a98441cbb2e05255427e6260e19ae68","modified":1657085956438},{"_id":"public/live2d_models/live2d-widget-model-hijiki/assets/mtn/00_idle.mtn","hash":"b224c60e463b9f71ddbfc0c720e430496c175f4f","modified":1657085956438},{"_id":"public/live2d_models/live2d-widget-model-hijiki/assets/mtn/04.mtn","hash":"c7a25d3c5d783639bae18db2f3cd284b819c3c85","modified":1657085956438},{"_id":"public/live2d_models/live2d-widget-model-hijiki/assets/mtn/05.mtn","hash":"dd20ad24b5d1830a5d44b9bccb28f922eea5e0e5","modified":1657085956438},{"_id":"public/live2d_models/live2d-widget-model-hijiki/assets/mtn/01.mtn","hash":"fb550833ae22c9954c3e01df37ed29b2d61700f2","modified":1657085956438},{"_id":"public/live2d_models/live2d-widget-model-hijiki/assets/mtn/02.mtn","hash":"7eafc52edc73b7cb80ae70d34b43c6ac778fa47b","modified":1657085956438},{"_id":"public/live2d_models/live2d-widget-model-hijiki/assets/mtn/07.mtn","hash":"b7f2e3a9fa4f3ffbb6e64a08f8d9f45ca1868ffb","modified":1657085956438},{"_id":"public/live2d_models/live2d-widget-model-hijiki/assets/mtn/08.mtn","hash":"4411c7651ff65195b113d95e7d5ebef8a59a37d9","modified":1657085956438},{"_id":"public/live2d_models/live2d-widget-model-hijiki/assets/mtn/06.mtn","hash":"ad404bd852d276cdd3d054c953e23f90e4e45ae1","modified":1657085956438},{"_id":"public/live2dw/assets/hijiki.pose.json","hash":"81438bf69b32c7c11e311b4fe043730cdc7b7ec2","modified":1657085956438},{"_id":"public/live2dw/assets/hijiki.model.json","hash":"feff43bf7498d213982c3736c2c029664e4bcbd2","modified":1657085956438},{"_id":"public/live2dw/assets/mtn/00_idle.mtn","hash":"b224c60e463b9f71ddbfc0c720e430496c175f4f","modified":1657085956438},{"_id":"public/live2dw/assets/mtn/02.mtn","hash":"7eafc52edc73b7cb80ae70d34b43c6ac778fa47b","modified":1657085956438},{"_id":"public/live2dw/assets/mtn/01.mtn","hash":"fb550833ae22c9954c3e01df37ed29b2d61700f2","modified":1657085956438},{"_id":"public/live2dw/assets/mtn/06.mtn","hash":"ad404bd852d276cdd3d054c953e23f90e4e45ae1","modified":1657085956438},{"_id":"public/live2dw/assets/mtn/05.mtn","hash":"dd20ad24b5d1830a5d44b9bccb28f922eea5e0e5","modified":1657085956438},{"_id":"public/live2dw/assets/mtn/03.mtn","hash":"f900737c7a98441cbb2e05255427e6260e19ae68","modified":1657085956438},{"_id":"public/live2dw/assets/mtn/07.mtn","hash":"b7f2e3a9fa4f3ffbb6e64a08f8d9f45ca1868ffb","modified":1657085956438},{"_id":"public/live2dw/assets/mtn/04.mtn","hash":"c7a25d3c5d783639bae18db2f3cd284b819c3c85","modified":1657085956438},{"_id":"public/live2dw/assets/mtn/08.mtn","hash":"4411c7651ff65195b113d95e7d5ebef8a59a37d9","modified":1657085956438},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1657085956438},{"_id":"public/donates/wechat.jpg","hash":"b0ed0daa9a55366db3cccde18757a893ebd24725","modified":1657085956438},{"_id":"public/images/MESA.jpg","hash":"a6d81d3592b6c4bb7cef451c1764ce162cf7b352","modified":1657085956438},{"_id":"public/images/es-doc-client-bulkSuccess.png","hash":"e285de6843916d0a3f2c14cf0559641db7a33a0c","modified":1657085956438},{"_id":"public/images/z-chat-1-demand.png","hash":"9ba8f5efd714202505789c730a6c7c05f5b25606","modified":1657085956438},{"_id":"public/donates/alipay.jpg","hash":"642ef8e705cf1af8fde7634b71708d8f286eceac","modified":1657085956438},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1657085956438},{"_id":"public/live2d_models/live2d-widget-model-hijiki/assets/moc/hijiki.moc","hash":"44289e62545a7046e0f5231103a851750b78524e","modified":1657085956438},{"_id":"public/live2dw/assets/moc/hijiki.moc","hash":"44289e62545a7046e0f5231103a851750b78524e","modified":1657085956438},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1657085956438},{"_id":"public/live2d_models/live2d-widget-model-hijiki/assets/moc/hijiki.2048/texture_00.png","hash":"66464e0d96439695b5542c5e2f5be60739c29999","modified":1657085956438},{"_id":"public/live2dw/assets/moc/hijiki.2048/texture_00.png","hash":"66464e0d96439695b5542c5e2f5be60739c29999","modified":1657085956438},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1657085956438},{"_id":"public/covers/GOSTBLADE1.jpg","hash":"a621a47a4f1899f5be9406fb2d0dacb93f172fc8","modified":1657085956438},{"_id":"public/covers/GOSTBLADE3.jpg","hash":"443e2d420db3af20c28270ab723441d729b988ed","modified":1657085956438},{"_id":"public/covers/GOSTBLADE2.png","hash":"c76016dbf133486544ffa32a2f93d36782f9e224","modified":1657085956438}],"Category":[{"name":"docker","_id":"cl59671m3000484uqch9y71ph"},{"name":"java","_id":"cl59671m8000984uq5mtw9ccq"},{"name":"project","_id":"cl59671mf000f84uq7dyi0mok"}],"Data":[],"Page":[{"_content":"{\n  \"name\": \"live2d-widget-model-hijiki\",\n  \"version\": \"1.0.5\",\n  \"description\": \"hijiki live2d model for live2d-widget.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/xiazeyu/live2d-widget-models.git\"\n  },\n  \"license\": \"GPL-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/xiazeyu/live2d-widget-models/issues\"\n  },\n  \"homepage\": \"https://github.com/xiazeyu/live2d-widget-models#readme\"\n}\n","source":"live2d_models/live2d-widget-model-hijiki/package.json","raw":"{\n  \"name\": \"live2d-widget-model-hijiki\",\n  \"version\": \"1.0.5\",\n  \"description\": \"hijiki live2d model for live2d-widget.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/xiazeyu/live2d-widget-models.git\"\n  },\n  \"license\": \"GPL-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/xiazeyu/live2d-widget-models/issues\"\n  },\n  \"homepage\": \"https://github.com/xiazeyu/live2d-widget-models#readme\"\n}\n","date":"2022-05-26T07:07:47.566Z","updated":"2022-05-26T07:07:47.566Z","path":"live2d_models/live2d-widget-model-hijiki/package.json","layout":"false","title":"","comments":1,"_id":"cl59671lw000084uq5tm7axhq","content":"{\"name\":\"live2d-widget-model-hijiki\",\"version\":\"1.0.5\",\"description\":\"hijiki live2d model for live2d-widget.js\",\"scripts\":{\"test\":\"echo \\\"Error: no test specified\\\" && exit 1\"},\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/xiazeyu/live2d-widget-models.git\"},\"license\":\"GPL-2.0\",\"bugs\":{\"url\":\"https://github.com/xiazeyu/live2d-widget-models/issues\"},\"homepage\":\"https://github.com/xiazeyu/live2d-widget-models#readme\"}","site":{"data":{}},"excerpt":"","more":"{\"name\":\"live2d-widget-model-hijiki\",\"version\":\"1.0.5\",\"description\":\"hijiki live2d model for live2d-widget.js\",\"scripts\":{\"test\":\"echo \\\"Error: no test specified\\\" && exit 1\"},\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/xiazeyu/live2d-widget-models.git\"},\"license\":\"GPL-2.0\",\"bugs\":{\"url\":\"https://github.com/xiazeyu/live2d-widget-models/issues\"},\"homepage\":\"https://github.com/xiazeyu/live2d-widget-models#readme\"}"},{"_content":"\n{\"type\":\"Live2D Pose\",\"fade_in\":0,\"parts_visible\":[{\"group\":[{\"id\":\"PARTS_01_ARM_R\"},{\"id\":\"PARTS_01_ARM_R_02\"}]},{\"group\":[{\"id\":\"PARTS_01_ARM_L\"},{\"id\":\"PARTS_01_ARM_L_02\"}]}]}","source":"live2d_models/live2d-widget-model-hijiki/assets/hijiki.pose.json","raw":"\n{\"type\":\"Live2D Pose\",\"fade_in\":0,\"parts_visible\":[{\"group\":[{\"id\":\"PARTS_01_ARM_R\"},{\"id\":\"PARTS_01_ARM_R_02\"}]},{\"group\":[{\"id\":\"PARTS_01_ARM_L\"},{\"id\":\"PARTS_01_ARM_L_02\"}]}]}","date":"2022-05-26T07:15:07.247Z","updated":"2022-05-26T07:15:07.247Z","path":"live2d_models/live2d-widget-model-hijiki/assets/hijiki.pose.json","layout":"false","title":"","comments":1,"_id":"cl59671m1000284uq1z9uglnl","content":"{\"type\":\"Live2D Pose\",\"fade_in\":0,\"parts_visible\":[{\"group\":[{\"id\":\"PARTS_01_ARM_R\"},{\"id\":\"PARTS_01_ARM_R_02\"}]},{\"group\":[{\"id\":\"PARTS_01_ARM_L\"},{\"id\":\"PARTS_01_ARM_L_02\"}]}]}","site":{"data":{}},"excerpt":"","more":"{\"type\":\"Live2D Pose\",\"fade_in\":0,\"parts_visible\":[{\"group\":[{\"id\":\"PARTS_01_ARM_R\"},{\"id\":\"PARTS_01_ARM_R_02\"}]},{\"group\":[{\"id\":\"PARTS_01_ARM_L\"},{\"id\":\"PARTS_01_ARM_L_02\"}]}]}"},{"_content":"{\"version\":\"Sample 1.0.0\",\"model\":\"moc/hijiki.moc\",\"textures\":[\"moc/hijiki.2048/texture_00.png\"],\"name\":\"hijiki\",\"pose\":\"hijiki.pose.json\",\"motions\":{\"idle\":[{\"file\":\"mtn/00_idle.mtn\"}],\"\":[{\"file\":\"mtn/01.mtn\"},{\"file\":\"mtn/02.mtn\"},{\"file\":\"mtn/03.mtn\"},{\"file\":\"mtn/04.mtn\"},{\"file\":\"mtn/05.mtn\"},{\"file\":\"mtn/06.mtn\"},{\"file\":\"mtn/07.mtn\"},{\"file\":\"mtn/08.mtn\"}]}}","source":"live2d_models/live2d-widget-model-hijiki/assets/hijiki.model.json","raw":"{\"version\":\"Sample 1.0.0\",\"model\":\"moc/hijiki.moc\",\"textures\":[\"moc/hijiki.2048/texture_00.png\"],\"name\":\"hijiki\",\"pose\":\"hijiki.pose.json\",\"motions\":{\"idle\":[{\"file\":\"mtn/00_idle.mtn\"}],\"\":[{\"file\":\"mtn/01.mtn\"},{\"file\":\"mtn/02.mtn\"},{\"file\":\"mtn/03.mtn\"},{\"file\":\"mtn/04.mtn\"},{\"file\":\"mtn/05.mtn\"},{\"file\":\"mtn/06.mtn\"},{\"file\":\"mtn/07.mtn\"},{\"file\":\"mtn/08.mtn\"}]}}","date":"2022-05-26T07:07:47.570Z","updated":"2022-05-26T07:07:47.570Z","path":"live2d_models/live2d-widget-model-hijiki/assets/hijiki.model.json","layout":"false","title":"","comments":1,"_id":"cl59671m5000684uq5off69c5","content":"{\"version\":\"Sample 1.0.0\",\"model\":\"moc/hijiki.moc\",\"textures\":[\"moc/hijiki.2048/texture_00.png\"],\"name\":\"hijiki\",\"pose\":\"hijiki.pose.json\",\"motions\":{\"idle\":[{\"file\":\"mtn/00_idle.mtn\"}],\"\":[{\"file\":\"mtn/01.mtn\"},{\"file\":\"mtn/02.mtn\"},{\"file\":\"mtn/03.mtn\"},{\"file\":\"mtn/04.mtn\"},{\"file\":\"mtn/05.mtn\"},{\"file\":\"mtn/06.mtn\"},{\"file\":\"mtn/07.mtn\"},{\"file\":\"mtn/08.mtn\"}]}}","site":{"data":{}},"excerpt":"","more":"{\"version\":\"Sample 1.0.0\",\"model\":\"moc/hijiki.moc\",\"textures\":[\"moc/hijiki.2048/texture_00.png\"],\"name\":\"hijiki\",\"pose\":\"hijiki.pose.json\",\"motions\":{\"idle\":[{\"file\":\"mtn/00_idle.mtn\"}],\"\":[{\"file\":\"mtn/01.mtn\"},{\"file\":\"mtn/02.mtn\"},{\"file\":\"mtn/03.mtn\"},{\"file\":\"mtn/04.mtn\"},{\"file\":\"mtn/05.mtn\"},{\"file\":\"mtn/06.mtn\"},{\"file\":\"mtn/07.mtn\"},{\"file\":\"mtn/08.mtn\"}]}}"}],"Post":[{"title":"Docker 学习笔记 (1)","cover":"/images/docker.png","updated":"2022-05-20T02:40:22.000Z","id":"1","_content":"Docker学习笔记 - 命令\n\n<!-- more -->\n\n<!-- {% codeblock \"ElasticsearchConfig.java\" lang:java %}\n{% endcodeblock %} -->\n\n![image](/images/docker-cli1.png)\ndocker volume [COMMAND]\n\n- create\t\t\t创建一个数据卷\n- inspect          显示一个或多个数据卷（volume）的详细信息\n- ls                     列出所有volume\n- prune             删除目前没人使用的数据卷volume\n- rm                   删除指定volume\n\n代码块测试：\n{% codeblock \"HelloWord.java\" lang:java %}\npublic static void main(String[] args) {\n    System.out.println(\"Hello World!\")\n}\n{% endcodeblock %}","source":"_posts/docker-cli-1.md","raw":"---\ntitle: Docker学习笔记(1)\ncover: /images/docker.png\nupdated: 2022-05-20 10:40:22\nid: 000001\ncategories:\n- docker\ntags:\n- 运维\n---\nDocker学习笔记 - 命令\n\n<!-- more -->\n\n<!-- {% codeblock \"ElasticsearchConfig.java\" lang:java %}\n{% endcodeblock %} -->\n\n![image](/images/docker-cli1.png)\ndocker volume [COMMAND]\n\n- create\t\t\t创建一个数据卷\n- inspect          显示一个或多个数据卷（volume）的详细信息\n- ls                     列出所有volume\n- prune             删除目前没人使用的数据卷volume\n- rm                   删除指定volume\n\n代码块测试：\n{% codeblock \"HelloWord.java\" lang:java %}\npublic static void main(String[] args) {\n    System.out.println(\"Hello World!\")\n}\n{% endcodeblock %}","slug":"docker-cli-1","published":1,"date":"2022-04-07T00:26:31.482Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl59671ly000184uqhix2gzxf","content":"<p>Docker 学习笔记 - 命令</p>\n<span id=\"more\"></span>\n\n<!-- <figure class=\"highlight java\"><figcaption><span>ElasticsearchConfig.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><br></code></pre></td></tr></table></figure> -->\n\n<p><img src=\"/images/docker-cli1.png\" alt=\"image\"><br>docker volume [COMMAND]</p>\n<ul>\n<li>create\t\t\t创建一个数据卷</li>\n<li>inspect          显示一个或多个数据卷（volume）的详细信息</li>\n<li>ls                     列出所有 volume</li>\n<li>prune             删除目前没人使用的数据卷 volume</li>\n<li>rm                   删除指定 volume</li>\n</ul>\n<p>代码块测试：</p>\n<figure class=\"highlight java\"><figcaption><span>HelloWord.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span> <span class=\"hljs-params\">(String [] args)</span> &#123;<br>    System.out.println (<span class=\"hljs-string\">&quot;Hello World!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>Docker 学习笔记 - 命令</p>","more":"<!-- <figure class=\"highlight java\"><figcaption><span>ElasticsearchConfig.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><br></code></pre></td></tr></table></figure> -->\n\n<p><img src=\"/images/docker-cli1.png\" alt=\"image\"><br>docker volume [COMMAND]</p>\n<ul>\n<li>create\t\t\t创建一个数据卷</li>\n<li>inspect          显示一个或多个数据卷（volume）的详细信息</li>\n<li>ls                     列出所有 volume</li>\n<li>prune             删除目前没人使用的数据卷 volume</li>\n<li>rm                   删除指定 volume</li>\n</ul>\n<p>代码块测试：</p>\n<figure class=\"highlight java\"><figcaption><span>HelloWord.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span> <span class=\"hljs-params\">(String [] args)</span> &#123;<br>    System.out.println (<span class=\"hljs-string\">&quot;Hello World!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"SpringBoot 使用 elasticsearch-java8.1.2 客户端","cover":"/covers/GOSTBLADE1.jpg","updated":"2022-05-22T11:14:22.000Z","id":"2","toc":true,"_content":"由于自己在学**elasticsearch-java**客户端的8.1.2版本的时候由于网上教程很少，学的很吃力。所以决定自己写一篇博客来记录一下。\n<!-- more -->\n\n# 导入jar包\n\n{% codeblock \"pom.xml\" lang:xml %}\n<dependency>\n    <groupId>co.elastic.clients</groupId>\n    <artifactId>elasticsearch-java</artifactId>\n    <version>8.1.2</version>\n</dependency>\n{% endcodeblock %}\n\n# 开始编写代码\n\n## 注入esClient的Bean\n\n因为我们这个客户端对象需要多次使用，每次实例化再配置就很不方便。所以我们可以写一个`Configuration`来自动注入springboot。\n\n先来理一下我们需要干什么事情：\n- 创建`Configuration`类\n- 使用`ConfigurationProperties`实现自动读取yaml配置（因为host地址是容易变的）\n\n{% codeblock \"ElasticsearchConfig.java\" lang:java %}\n/**\n * @author CHENPrime-coder <chenbprime@outlook.com>\n */\n@Configuration\n@ConfigurationProperties(prefix = \"es.config\")\npublic class ElasticsearchConfig {\n\n    // 需要动态变化的host地址\n    public String esServerAddress = \"127.0.0.1\";\n\n    public String getEsServerAddress() {\n        return esServerAddress;\n    }\n\n    public void setEsServerAddress(String esServerAddress) {\n        this.esServerAddress = esServerAddress;\n    }\n\n    // esClient的Bean\n    @Bean\n    public ElasticsearchClient esClient() {\n        // 1. 构造RestClient，端口是9200\n        RestClient client = RestClient.builder(\n                new HttpHost(esServerAddress, 9200)\n        ).build();\n        // 2. json转换配置，这里使用Jackson\n        ElasticsearchTransport transport = new RestClientTransport(\n                client, new JacksonJsonpMapper()\n        );\n        // 3. 构造ElasticsearchClient\n        return new ElasticsearchClient(transport);\n    }\n}\n{% endcodeblock %}\n\n## 修改application.yaml配置文件\n\n使用yaml配置host地址，这里假设我们需要使用`docker`部署，所以修改为`es-server`（容器名）。\n\n{% codeblock \"application.yaml\" lang:yaml %}\nes:\n  config:\n    # 这里写上主机地址（host），也可以写ip地址（如：127.0.0.1）\n    es-server-address: es-server\n{% endcodeblock %}\n\n## 索引库操作\n\n首先我们先在`test`包下创建测试类`HotelIndexTest.java`，开始测试客户端（Junit）。下面的代码中`beforeAll`方法和`afterAll`分别是初始化客户端和关闭客户端，使用原始的方式。这里我们使用springboot的自动注入esClient。\n\n我们先把代码的基本框架写好，再去写具体的凭借条件并查询\n\n{% codeblock \"HotelIndexTest.java\" lang:java %}\n@SpringBootTest\npublic class HotelIndexTest {\n\n    // 注入esClient\n    @Autowired\n    static ElasticsearchClient esClient;\n\n    // @BeforeAll\n    // static void beforeAll() {\n    //     restClient = RestClient.builder(\n    //             new HttpHost(\"192.168.118.10\", 9200)).build();\n    //     ElasticsearchTransport transport = new RestClientTransport(\n    //             restClient, new JacksonJsonpMapper()\n    //     );\n    // \n    //     esClient = new ElasticsearchClient(transport);\n    // }\n\n    // @AfterAll\n    // static void afterAll() throws IOException {\n    //     restClient.close();\n    // }\n\n    // 创建索引库\n    @Test\n    void createIndex() throws IOException {\n    }\n\n    // 删除索引库\n    @Test\n    void deleteIndex() throws IOException {\n    }\n\n    // 判断索引库是否存在\n    @Test\n    void existsIndex() throws IOException {\n    }\n\n}\n{% endcodeblock %}\n\n>elasticsearc-java使用了大量的建造器模式，有各种各样的Builder。并且需要一定的`lambda`基础，建议先学一下lambda再写代码\n\n### 创建索引库\n\n既然是创建索引库，并且上面也讲了需要用XXXBuilder来构造查询语句。所以我们需要使用`CreateIndexRequest.Builder`来创建索引库\n\n创建索引库既可以用json字符串创建，也可以使用lambda的方式创建。这里我们先使用json演示，我们需要先创建一个常量类包装json字符串。这里的json写法和DSL的写法是一样的，由于本文的重心并不是DSL，所以这里就不赘述了\n\n{% codeblock \"HotelConstants.java\" lang:java %}\n/**\n * @author CHENPrime-coder <chenbprime@outlook.com>\n */\npublic class HotelConstants {\n\n    public static final String MAPPING_TEMPLATE = \"{\\n\" +\n            \"  \\\"mappings\\\": {\\n\" +\n            \"    \\\"properties\\\": {\\n\" +\n            \"      \\\"id\\\": {\\n\" +\n            \"        \\\"type\\\": \\\"keyword\\\"\\n\" +\n            \"      },\\n\" +\n            \"      \\\"name\\\": {\\n\" +\n            \"        \\\"type\\\": \\\"text\\\",\\n\" +\n            \"        \\\"analyzer\\\": \\\"ik_max_word\\\",\\n\" +\n            \"        \\\"copy_to\\\": \\\"all\\\"\\n\" +\n            \"      },\\n\" +\n            \"      \\\"address\\\": {\\n\" +\n            \"        \\\"type\\\": \\\"keyword\\\",\\n\" +\n            \"        \\\"index\\\": false\\n\" +\n            \"      },\\n\" +\n            \"      \\\"price\\\": {\\n\" +\n            \"        \\\"type\\\": \\\"integer\\\"\\n\" +\n            \"      },\\n\" +\n            \"      \\\"score\\\": {\\n\" +\n            \"        \\\"type\\\": \\\"integer\\\"\\n\" +\n            \"      },\\n\" +\n            \"      \\\"brand\\\": {\\n\" +\n            \"        \\\"type\\\": \\\"keyword\\\",\\n\" +\n            \"        \\\"copy_to\\\": \\\"all\\\"\\n\" +\n            \"      },\\n\" +\n            \"      \\\"city\\\": {\\n\" +\n            \"        \\\"type\\\": \\\"keyword\\\",\\n\" +\n            \"        \\\"copy_to\\\": \\\"all\\\"\\n\" +\n            \"      },\\n\" +\n            \"      \\\"starName\\\": {\\n\" +\n            \"        \\\"type\\\": \\\"keyword\\\",\\n\" +\n            \"        \\\"copy_to\\\": \\\"all\\\"\\n\" +\n            \"      },\\n\" +\n            \"      \\\"business\\\": {\\n\" +\n            \"        \\\"type\\\": \\\"keyword\\\",\\n\" +\n            \"        \\\"copy_to\\\": \\\"all\\\"\\n\" +\n            \"      },\\n\" +\n            \"      \\\"location\\\": {\\n\" +\n            \"        \\\"type\\\": \\\"geo_point\\\"\\n\" +\n            \"      },\\n\" +\n            \"      \\\"pic\\\": {\\n\" +\n            \"        \\\"type\\\": \\\"keyword\\\",\\n\" +\n            \"        \\\"index\\\": false\\n\" +\n            \"      },\\n\" +\n            \"      \\\"all\\\": {\\n\" +\n            \"        \\\"type\\\": \\\"text\\\",\\n\" +\n            \"        \\\"analyzer\\\": \\\"ik_max_word\\\"\\n\" +\n            \"      }\\n\" +\n            \"    }\\n\" +\n            \"  }\\n\" +\n            \"}\";\n    public static final String USER_MAPPING = \"{\\n\" +\n            \"  \\\"mappings\\\": {\\n\" +\n            \"    \\\"properties\\\": {\\n\" +\n            \"      \\\"info\\\": {\\n\" +\n            \"        \\\"type\\\": \\\"text\\\",\\n\" +\n            \"        \\\"analyzer\\\": \\\"ik_smart\\\"\\n\" +\n            \"      },\\n\" +\n            \"      \\\"email\\\": {\\n\" +\n            \"        \\\"index\\\": false,\\n\" +\n            \"        \\\"type\\\": \\\"keyword\\\"\\n\" +\n            \"      },\\n\" +\n            \"      \\\"name\\\": {\\n\" +\n            \"        \\\"type\\\": \\\"object\\\",\\n\" +\n            \"        \\\"properties\\\": {\\n\" +\n            \"          \\\"firstName\\\": {\\n\" +\n            \"            \\\"type\\\": \\\"keyword\\\"\\n\" +\n            \"          },\\n\" +\n            \"          \\\"lastName\\\": {\\n\" +\n            \"            \\\"type\\\": \\\"keyword\\\"\\n\" +\n            \"          }\\n\" +\n            \"        }\\n\" +\n            \"      }\\n\" +\n            \"    }\\n\" +\n            \"  }\\n\" +\n            \"}\";\n}\n{% endcodeblock %}\n\n然后我们就可以开始写具体的搜索请求了\n\n{% codeblock \"HotelIndexTest.java\" lang:java %}\n@Test\nvoid createIndex() throws IOException {\n    // 以ByteArrayInputStream读入字符串\n    ByteArrayInputStream inputStream = new ByteArrayInputStream(USER_MAPPING.getBytes(StandardCharsets.UTF_8));\n\n    // 实例化建造器\n    CreateIndexRequest.Builder builder = new CreateIndexRequest.Builder();\n    // 设置索引库的名字\n    builder.index(\"user\");\n    // 使用json方式创建索引库\n    builder.withJson(inputStream);\n    // 构造请求\n    CreateIndexRequest request = builder.build();\n\n    // 使用esClient测试请求并返回结果\n    System.out.println(esClient.indices().create(request).acknowledged());\n}\n{% endcodeblock %}\n\n这里输出的`acknowledged`为`true`就说明索引库创建成功了，下面的`acknowledged`也同理\n\n### 删除索引库\n\n索引库的删除操作十分简单，我们只需要指定索引库名称就可以实现索引库的删除\n\n{% codeblock \"HotelIndexTest.java\" lang:java %}\n@Test\nvoid deleteIndex() throws IOException {\n    DeleteIndexRequest.Builder builder = new DeleteIndexRequest.Builder();\n    builder.index(\"user\");\n\n    System.out.println(esClient.indices().delete(builder.build()).acknowledged());\n}\n{% endcodeblock %}\n\n### 判断索引库是否存在\n\n判断索引库是否存在也很简单，指定一个索引库名就可以了\n\n{% codeblock \"HotelIndexTest.java\" lang:java %}\n@Test\nvoid existsIndex() throws IOException {\n    ExistsRequest.Builder builder = new ExistsRequest.Builder();\n    builder.index(\"user\");\n\n    System.out.println(esClient.indices().exists(builder.build()).value());\n}\n{% endcodeblock %}\n\n## 文档简单操作\n\nelasticsearch的文档操作比较麻烦，需要单独创建一个es文档的POJO（XXXDoc），这里创建一个`HotelDoc`的POJO这结构需要和创建索引库时的结构相同。\n\n我们来分析一下特殊字段该怎么处理（其实也就一个特殊字段）：\n- location地理位置字段，这里由于Hotel原始POJO里面并没有这么一个字段，所以我们需要根据es中经纬度的写法来转换格式\n\n{% codeblock \"HotelDoc.java\" lang:java %}\n/**\n * @author CHENPrime-coder <chenbprime@outlook.com>\n */\n@Data\n@NoArgsConstructor\npublic class HotelDoc {\n    private Long id;\n    private String name;\n    private String address;\n    private Integer price;\n    private Integer score;\n    private String brand;\n    private String city;\n    private String starName;\n    private String business;\n    private String location;\n    private String pic;\n\n    public HotelDoc(Hotel hotel) {\n        this.id = hotel.getId();\n        this.name = hotel.getName();\n        this.address = hotel.getAddress();\n        this.price = hotel.getPrice();\n        this.score = hotel.getScore();\n        this.brand = hotel.getBrand();\n        this.city = hotel.getCity();\n        this.starName = hotel.getStarName();\n        this.business = hotel.getBusiness();\n        this.location = hotel.getLatitude() + \", \" + hotel.getLongitude();\n        this.pic = hotel.getPic();\n    }\n}\n{% endcodeblock %}\n\n现在索引库的映射写好了，现在我们需要编写基本的框架\n\n{% codeblock \"HotelDocumentTest.java\" lang:java %}\n/**\n * @author CHENPrime-coder <chenbprime@outlook.com>\n */\n@SpringBootTest\npublic class HotelDocumentTest {\n\n    @Autowired\n    private IHotelService service;\n\n    // es客户端自动注入\n    @Autowired\n    static ElasticsearchClient esClient;\n\n    // 插入文档\n    @Test\n    void testAddDocument() throws IOException {\n    }\n\n    // 根据id获取文档\n    @Test\n    void testGetDocumentById() throws IOException {\n    }\n\n    // 根据id更新文档\n    @Test\n    void testUpdateDocumentById() throws IOException {\n    }\n\n    // 根据id删除文档\n    @Test\n    void testDeleteDocumentById() throws IOException {\n    }\n\n    // 批量导入文档\n    @Test\n    void testBulkDocument() throws IOException {\n    }\n}\n{% endcodeblock %}\n\n### 插入文档\n\nes客户端的文档插入操作。我们需要先根据基本的Hotel获取HotelDoc对象，这里使用封装好的service获取hotel。然后使用`IndexRequest.Builder`构造文档插入请求\n\n{% codeblock \"HotelDocumentTest.java\" lang:java %}\n@Test\nvoid testAddDocument() throws IOException {\n    Hotel hotel = service.getById(56227L);\n    // 转换为文档类型\n    HotelDoc doc = new HotelDoc(hotel);\n\n    // 获取建造器\n    IndexRequest.Builder<HotelDoc> builder = new IndexRequest.Builder<>();\n    // 指定索引库名\n    builder.index(\"hotel\");\n    // 设置文档id\n    builder.id(doc.getId().toString());\n    // 读入文档\n    builder.document(doc);\n\n    // 执行插入操作，获取result并打印\n    System.out.println(esClient.index(builder.build()).result());\n}\n{% endcodeblock %}\n\n如果一切正常，那么将会输出如下内容\n![插入文档成功](/images/es-doc-cliten-addSuccess.png)\n\n### 根据id获取文档\n\n如果只需要根据id获取文档，那么只需要指定索引库名和id就行了，下面的删除也是一样。需要注意的是，id需要是String字符串类型。这里需要使用GetRequest.Builder建造器\n\n{% codeblock \"HotelDocumentTest.java\" lang:java %}\n@Test\nvoid testGetDocumentById() throws IOException {\n    GetRequest.Builder builder = new GetRequest.Builder();\n    // 设置索引库名\n    builder.index(\"hotel\");\n    // 设置文档id\n    builder.id(\"36934\");\n\t\n    //\t\t\t\t\t\t\t\t传入GetRequest\t设置返回的对象类型\n    System.out.println(esClient.get(builder.build(), HotelDoc.class).source());\n}\n{% endcodeblock %}\n\n获取成功的结果打印：\n\n![获取文档成功](/images/es-doc-client-getByIdSucces.png)\n\n### 根据id更新文档\n\n修改文档有两种方式\n- 方式一: 全量更新，再次写入id一样的文档，就会删除旧文档，添加新文档\n- 方式二: 局部更新，更新部分字段\n\n这里使用第二种方式\n\n更新文档需要使用`UpdateRequest.Builder`建造器，并指定id索引库名和文档对象（这里我有一个问题，`UpdateRequest.Builder<HotelDoc, HotelDoc>`中的两个泛型分别是什么意思？希望有大佬再评论区指出，感谢）\n\n{% codeblock \"HotelDocumentTest.java\" lang:java %}\n@Test\nvoid testUpdateDocumentById() throws IOException {\n    Hotel hotel = service.getById(36934L);\n    // 转换为文档类型\n    HotelDoc doc = new HotelDoc(hotel);\n    // 修改数据\n    doc.setName(\"修改酒店名字测试\");\n\n    //                    修改的类型  数据类型？ \n    UpdateRequest.Builder<HotelDoc, HotelDoc> builder = new UpdateRequest.Builder<>();\n    // 设置索引库名\n    builder.index(\"hotel\");\n    // 设置id\n    builder.id(\"36934\");\n    // 读入文档对象\n    builder.doc(doc);\n\n    // 执行修改操作                                        修改类型         获取状态\n    System.out.println(esClient.update(builder.build(), HotelDoc.class).result());\n}\n{% endcodeblock %}\n\n更新成功后的结果打印：\n\n![更新文档成功](/images/es-doc-client-updateSuccess.png)\n\n### 根据id删除文档\n\n删除文档很简单，指定文档id和索引库名就好了。这里就不过多赘述了\n\n{% codeblock \"HotelDocumentTest.java\" lang:java %}\n    @Test\n    void testDeleteDocumentById() throws IOException {\n        DeleteRequest.Builder builder = new DeleteRequest.Builder();\n        builder.index(\"hotel\");\n        builder.id(\"36934\");\n\n        System.out.println(esClient.delete(builder.build()).result());\n    }\n{% endcodeblock %}\n\n删除成功打印：\n\n![删除文档成功](/images/es-doc-client-deleteSuccess.png)\n\n### 批量导入文档\n\n批量导入文档就需要写一点lambda的语法了。其实也不难。只需要遍历然后放入请求建造器就ok了\n\n{% codeblock \"HotelDocumentTest.java\" lang:java %}\n@Test\nvoid testBulkDocument() throws IOException {\n    // 使用mybatis-plus获取所有的记录\n    List<Hotel> list = service.list();\n\n    BulkRequest.Builder builder = new BulkRequest.Builder();\n    // 设置索引库\n    builder.index(\"hotel\");\n\n    // 遍历记录\n    for (Hotel hotel : list) {\n        // 添加数据\n        builder.operations(o -> o // lambda\n                           .create(v -> v // lambda\n                                   // 读入id\n                                   .id(hotel.getId().toString())\n                                   // 读入文档\n                                   .document(new HotelDoc(hotel))\n                                   // 设置索引库\n                                   .index(\"hotel\")\n                                  )\n                          );\n    }\n\n    // 执行批量插入，并获取是否发生了错误\n    System.out.println(esClient.bulk(builder.build()).errors());\n}\n{% endcodeblock %}\n\n批量导入成功打印：\n\n![批量导入文档成功](/images/es-doc-client-bulkSuccess.png)\n\n# 结语\n\n由于本人第一次写这样的博客，所以可能有一些地方没有考虑到，希望有大佬可以指出问题。感谢\n","source":"_posts/elasticsearch-java.md","raw":"---\ntitle: SpringBoot使用elasticsearch-java8.1.2客户端\ncover: /covers/GOSTBLADE1.jpg\nupdated: 2022-05-22 19:14:22\nid: 000002\ncategories:\n- java\ntags:\n- elasticsearch\n- springboot\ntoc: true\n---\n由于自己在学**elasticsearch-java**客户端的8.1.2版本的时候由于网上教程很少，学的很吃力。所以决定自己写一篇博客来记录一下。\n<!-- more -->\n\n# 导入jar包\n\n{% codeblock \"pom.xml\" lang:xml %}\n<dependency>\n    <groupId>co.elastic.clients</groupId>\n    <artifactId>elasticsearch-java</artifactId>\n    <version>8.1.2</version>\n</dependency>\n{% endcodeblock %}\n\n# 开始编写代码\n\n## 注入esClient的Bean\n\n因为我们这个客户端对象需要多次使用，每次实例化再配置就很不方便。所以我们可以写一个`Configuration`来自动注入springboot。\n\n先来理一下我们需要干什么事情：\n- 创建`Configuration`类\n- 使用`ConfigurationProperties`实现自动读取yaml配置（因为host地址是容易变的）\n\n{% codeblock \"ElasticsearchConfig.java\" lang:java %}\n/**\n * @author CHENPrime-coder <chenbprime@outlook.com>\n */\n@Configuration\n@ConfigurationProperties(prefix = \"es.config\")\npublic class ElasticsearchConfig {\n\n    // 需要动态变化的host地址\n    public String esServerAddress = \"127.0.0.1\";\n\n    public String getEsServerAddress() {\n        return esServerAddress;\n    }\n\n    public void setEsServerAddress(String esServerAddress) {\n        this.esServerAddress = esServerAddress;\n    }\n\n    // esClient的Bean\n    @Bean\n    public ElasticsearchClient esClient() {\n        // 1. 构造RestClient，端口是9200\n        RestClient client = RestClient.builder(\n                new HttpHost(esServerAddress, 9200)\n        ).build();\n        // 2. json转换配置，这里使用Jackson\n        ElasticsearchTransport transport = new RestClientTransport(\n                client, new JacksonJsonpMapper()\n        );\n        // 3. 构造ElasticsearchClient\n        return new ElasticsearchClient(transport);\n    }\n}\n{% endcodeblock %}\n\n## 修改application.yaml配置文件\n\n使用yaml配置host地址，这里假设我们需要使用`docker`部署，所以修改为`es-server`（容器名）。\n\n{% codeblock \"application.yaml\" lang:yaml %}\nes:\n  config:\n    # 这里写上主机地址（host），也可以写ip地址（如：127.0.0.1）\n    es-server-address: es-server\n{% endcodeblock %}\n\n## 索引库操作\n\n首先我们先在`test`包下创建测试类`HotelIndexTest.java`，开始测试客户端（Junit）。下面的代码中`beforeAll`方法和`afterAll`分别是初始化客户端和关闭客户端，使用原始的方式。这里我们使用springboot的自动注入esClient。\n\n我们先把代码的基本框架写好，再去写具体的凭借条件并查询\n\n{% codeblock \"HotelIndexTest.java\" lang:java %}\n@SpringBootTest\npublic class HotelIndexTest {\n\n    // 注入esClient\n    @Autowired\n    static ElasticsearchClient esClient;\n\n    // @BeforeAll\n    // static void beforeAll() {\n    //     restClient = RestClient.builder(\n    //             new HttpHost(\"192.168.118.10\", 9200)).build();\n    //     ElasticsearchTransport transport = new RestClientTransport(\n    //             restClient, new JacksonJsonpMapper()\n    //     );\n    // \n    //     esClient = new ElasticsearchClient(transport);\n    // }\n\n    // @AfterAll\n    // static void afterAll() throws IOException {\n    //     restClient.close();\n    // }\n\n    // 创建索引库\n    @Test\n    void createIndex() throws IOException {\n    }\n\n    // 删除索引库\n    @Test\n    void deleteIndex() throws IOException {\n    }\n\n    // 判断索引库是否存在\n    @Test\n    void existsIndex() throws IOException {\n    }\n\n}\n{% endcodeblock %}\n\n>elasticsearc-java使用了大量的建造器模式，有各种各样的Builder。并且需要一定的`lambda`基础，建议先学一下lambda再写代码\n\n### 创建索引库\n\n既然是创建索引库，并且上面也讲了需要用XXXBuilder来构造查询语句。所以我们需要使用`CreateIndexRequest.Builder`来创建索引库\n\n创建索引库既可以用json字符串创建，也可以使用lambda的方式创建。这里我们先使用json演示，我们需要先创建一个常量类包装json字符串。这里的json写法和DSL的写法是一样的，由于本文的重心并不是DSL，所以这里就不赘述了\n\n{% codeblock \"HotelConstants.java\" lang:java %}\n/**\n * @author CHENPrime-coder <chenbprime@outlook.com>\n */\npublic class HotelConstants {\n\n    public static final String MAPPING_TEMPLATE = \"{\\n\" +\n            \"  \\\"mappings\\\": {\\n\" +\n            \"    \\\"properties\\\": {\\n\" +\n            \"      \\\"id\\\": {\\n\" +\n            \"        \\\"type\\\": \\\"keyword\\\"\\n\" +\n            \"      },\\n\" +\n            \"      \\\"name\\\": {\\n\" +\n            \"        \\\"type\\\": \\\"text\\\",\\n\" +\n            \"        \\\"analyzer\\\": \\\"ik_max_word\\\",\\n\" +\n            \"        \\\"copy_to\\\": \\\"all\\\"\\n\" +\n            \"      },\\n\" +\n            \"      \\\"address\\\": {\\n\" +\n            \"        \\\"type\\\": \\\"keyword\\\",\\n\" +\n            \"        \\\"index\\\": false\\n\" +\n            \"      },\\n\" +\n            \"      \\\"price\\\": {\\n\" +\n            \"        \\\"type\\\": \\\"integer\\\"\\n\" +\n            \"      },\\n\" +\n            \"      \\\"score\\\": {\\n\" +\n            \"        \\\"type\\\": \\\"integer\\\"\\n\" +\n            \"      },\\n\" +\n            \"      \\\"brand\\\": {\\n\" +\n            \"        \\\"type\\\": \\\"keyword\\\",\\n\" +\n            \"        \\\"copy_to\\\": \\\"all\\\"\\n\" +\n            \"      },\\n\" +\n            \"      \\\"city\\\": {\\n\" +\n            \"        \\\"type\\\": \\\"keyword\\\",\\n\" +\n            \"        \\\"copy_to\\\": \\\"all\\\"\\n\" +\n            \"      },\\n\" +\n            \"      \\\"starName\\\": {\\n\" +\n            \"        \\\"type\\\": \\\"keyword\\\",\\n\" +\n            \"        \\\"copy_to\\\": \\\"all\\\"\\n\" +\n            \"      },\\n\" +\n            \"      \\\"business\\\": {\\n\" +\n            \"        \\\"type\\\": \\\"keyword\\\",\\n\" +\n            \"        \\\"copy_to\\\": \\\"all\\\"\\n\" +\n            \"      },\\n\" +\n            \"      \\\"location\\\": {\\n\" +\n            \"        \\\"type\\\": \\\"geo_point\\\"\\n\" +\n            \"      },\\n\" +\n            \"      \\\"pic\\\": {\\n\" +\n            \"        \\\"type\\\": \\\"keyword\\\",\\n\" +\n            \"        \\\"index\\\": false\\n\" +\n            \"      },\\n\" +\n            \"      \\\"all\\\": {\\n\" +\n            \"        \\\"type\\\": \\\"text\\\",\\n\" +\n            \"        \\\"analyzer\\\": \\\"ik_max_word\\\"\\n\" +\n            \"      }\\n\" +\n            \"    }\\n\" +\n            \"  }\\n\" +\n            \"}\";\n    public static final String USER_MAPPING = \"{\\n\" +\n            \"  \\\"mappings\\\": {\\n\" +\n            \"    \\\"properties\\\": {\\n\" +\n            \"      \\\"info\\\": {\\n\" +\n            \"        \\\"type\\\": \\\"text\\\",\\n\" +\n            \"        \\\"analyzer\\\": \\\"ik_smart\\\"\\n\" +\n            \"      },\\n\" +\n            \"      \\\"email\\\": {\\n\" +\n            \"        \\\"index\\\": false,\\n\" +\n            \"        \\\"type\\\": \\\"keyword\\\"\\n\" +\n            \"      },\\n\" +\n            \"      \\\"name\\\": {\\n\" +\n            \"        \\\"type\\\": \\\"object\\\",\\n\" +\n            \"        \\\"properties\\\": {\\n\" +\n            \"          \\\"firstName\\\": {\\n\" +\n            \"            \\\"type\\\": \\\"keyword\\\"\\n\" +\n            \"          },\\n\" +\n            \"          \\\"lastName\\\": {\\n\" +\n            \"            \\\"type\\\": \\\"keyword\\\"\\n\" +\n            \"          }\\n\" +\n            \"        }\\n\" +\n            \"      }\\n\" +\n            \"    }\\n\" +\n            \"  }\\n\" +\n            \"}\";\n}\n{% endcodeblock %}\n\n然后我们就可以开始写具体的搜索请求了\n\n{% codeblock \"HotelIndexTest.java\" lang:java %}\n@Test\nvoid createIndex() throws IOException {\n    // 以ByteArrayInputStream读入字符串\n    ByteArrayInputStream inputStream = new ByteArrayInputStream(USER_MAPPING.getBytes(StandardCharsets.UTF_8));\n\n    // 实例化建造器\n    CreateIndexRequest.Builder builder = new CreateIndexRequest.Builder();\n    // 设置索引库的名字\n    builder.index(\"user\");\n    // 使用json方式创建索引库\n    builder.withJson(inputStream);\n    // 构造请求\n    CreateIndexRequest request = builder.build();\n\n    // 使用esClient测试请求并返回结果\n    System.out.println(esClient.indices().create(request).acknowledged());\n}\n{% endcodeblock %}\n\n这里输出的`acknowledged`为`true`就说明索引库创建成功了，下面的`acknowledged`也同理\n\n### 删除索引库\n\n索引库的删除操作十分简单，我们只需要指定索引库名称就可以实现索引库的删除\n\n{% codeblock \"HotelIndexTest.java\" lang:java %}\n@Test\nvoid deleteIndex() throws IOException {\n    DeleteIndexRequest.Builder builder = new DeleteIndexRequest.Builder();\n    builder.index(\"user\");\n\n    System.out.println(esClient.indices().delete(builder.build()).acknowledged());\n}\n{% endcodeblock %}\n\n### 判断索引库是否存在\n\n判断索引库是否存在也很简单，指定一个索引库名就可以了\n\n{% codeblock \"HotelIndexTest.java\" lang:java %}\n@Test\nvoid existsIndex() throws IOException {\n    ExistsRequest.Builder builder = new ExistsRequest.Builder();\n    builder.index(\"user\");\n\n    System.out.println(esClient.indices().exists(builder.build()).value());\n}\n{% endcodeblock %}\n\n## 文档简单操作\n\nelasticsearch的文档操作比较麻烦，需要单独创建一个es文档的POJO（XXXDoc），这里创建一个`HotelDoc`的POJO这结构需要和创建索引库时的结构相同。\n\n我们来分析一下特殊字段该怎么处理（其实也就一个特殊字段）：\n- location地理位置字段，这里由于Hotel原始POJO里面并没有这么一个字段，所以我们需要根据es中经纬度的写法来转换格式\n\n{% codeblock \"HotelDoc.java\" lang:java %}\n/**\n * @author CHENPrime-coder <chenbprime@outlook.com>\n */\n@Data\n@NoArgsConstructor\npublic class HotelDoc {\n    private Long id;\n    private String name;\n    private String address;\n    private Integer price;\n    private Integer score;\n    private String brand;\n    private String city;\n    private String starName;\n    private String business;\n    private String location;\n    private String pic;\n\n    public HotelDoc(Hotel hotel) {\n        this.id = hotel.getId();\n        this.name = hotel.getName();\n        this.address = hotel.getAddress();\n        this.price = hotel.getPrice();\n        this.score = hotel.getScore();\n        this.brand = hotel.getBrand();\n        this.city = hotel.getCity();\n        this.starName = hotel.getStarName();\n        this.business = hotel.getBusiness();\n        this.location = hotel.getLatitude() + \", \" + hotel.getLongitude();\n        this.pic = hotel.getPic();\n    }\n}\n{% endcodeblock %}\n\n现在索引库的映射写好了，现在我们需要编写基本的框架\n\n{% codeblock \"HotelDocumentTest.java\" lang:java %}\n/**\n * @author CHENPrime-coder <chenbprime@outlook.com>\n */\n@SpringBootTest\npublic class HotelDocumentTest {\n\n    @Autowired\n    private IHotelService service;\n\n    // es客户端自动注入\n    @Autowired\n    static ElasticsearchClient esClient;\n\n    // 插入文档\n    @Test\n    void testAddDocument() throws IOException {\n    }\n\n    // 根据id获取文档\n    @Test\n    void testGetDocumentById() throws IOException {\n    }\n\n    // 根据id更新文档\n    @Test\n    void testUpdateDocumentById() throws IOException {\n    }\n\n    // 根据id删除文档\n    @Test\n    void testDeleteDocumentById() throws IOException {\n    }\n\n    // 批量导入文档\n    @Test\n    void testBulkDocument() throws IOException {\n    }\n}\n{% endcodeblock %}\n\n### 插入文档\n\nes客户端的文档插入操作。我们需要先根据基本的Hotel获取HotelDoc对象，这里使用封装好的service获取hotel。然后使用`IndexRequest.Builder`构造文档插入请求\n\n{% codeblock \"HotelDocumentTest.java\" lang:java %}\n@Test\nvoid testAddDocument() throws IOException {\n    Hotel hotel = service.getById(56227L);\n    // 转换为文档类型\n    HotelDoc doc = new HotelDoc(hotel);\n\n    // 获取建造器\n    IndexRequest.Builder<HotelDoc> builder = new IndexRequest.Builder<>();\n    // 指定索引库名\n    builder.index(\"hotel\");\n    // 设置文档id\n    builder.id(doc.getId().toString());\n    // 读入文档\n    builder.document(doc);\n\n    // 执行插入操作，获取result并打印\n    System.out.println(esClient.index(builder.build()).result());\n}\n{% endcodeblock %}\n\n如果一切正常，那么将会输出如下内容\n![插入文档成功](/images/es-doc-cliten-addSuccess.png)\n\n### 根据id获取文档\n\n如果只需要根据id获取文档，那么只需要指定索引库名和id就行了，下面的删除也是一样。需要注意的是，id需要是String字符串类型。这里需要使用GetRequest.Builder建造器\n\n{% codeblock \"HotelDocumentTest.java\" lang:java %}\n@Test\nvoid testGetDocumentById() throws IOException {\n    GetRequest.Builder builder = new GetRequest.Builder();\n    // 设置索引库名\n    builder.index(\"hotel\");\n    // 设置文档id\n    builder.id(\"36934\");\n\t\n    //\t\t\t\t\t\t\t\t传入GetRequest\t设置返回的对象类型\n    System.out.println(esClient.get(builder.build(), HotelDoc.class).source());\n}\n{% endcodeblock %}\n\n获取成功的结果打印：\n\n![获取文档成功](/images/es-doc-client-getByIdSucces.png)\n\n### 根据id更新文档\n\n修改文档有两种方式\n- 方式一: 全量更新，再次写入id一样的文档，就会删除旧文档，添加新文档\n- 方式二: 局部更新，更新部分字段\n\n这里使用第二种方式\n\n更新文档需要使用`UpdateRequest.Builder`建造器，并指定id索引库名和文档对象（这里我有一个问题，`UpdateRequest.Builder<HotelDoc, HotelDoc>`中的两个泛型分别是什么意思？希望有大佬再评论区指出，感谢）\n\n{% codeblock \"HotelDocumentTest.java\" lang:java %}\n@Test\nvoid testUpdateDocumentById() throws IOException {\n    Hotel hotel = service.getById(36934L);\n    // 转换为文档类型\n    HotelDoc doc = new HotelDoc(hotel);\n    // 修改数据\n    doc.setName(\"修改酒店名字测试\");\n\n    //                    修改的类型  数据类型？ \n    UpdateRequest.Builder<HotelDoc, HotelDoc> builder = new UpdateRequest.Builder<>();\n    // 设置索引库名\n    builder.index(\"hotel\");\n    // 设置id\n    builder.id(\"36934\");\n    // 读入文档对象\n    builder.doc(doc);\n\n    // 执行修改操作                                        修改类型         获取状态\n    System.out.println(esClient.update(builder.build(), HotelDoc.class).result());\n}\n{% endcodeblock %}\n\n更新成功后的结果打印：\n\n![更新文档成功](/images/es-doc-client-updateSuccess.png)\n\n### 根据id删除文档\n\n删除文档很简单，指定文档id和索引库名就好了。这里就不过多赘述了\n\n{% codeblock \"HotelDocumentTest.java\" lang:java %}\n    @Test\n    void testDeleteDocumentById() throws IOException {\n        DeleteRequest.Builder builder = new DeleteRequest.Builder();\n        builder.index(\"hotel\");\n        builder.id(\"36934\");\n\n        System.out.println(esClient.delete(builder.build()).result());\n    }\n{% endcodeblock %}\n\n删除成功打印：\n\n![删除文档成功](/images/es-doc-client-deleteSuccess.png)\n\n### 批量导入文档\n\n批量导入文档就需要写一点lambda的语法了。其实也不难。只需要遍历然后放入请求建造器就ok了\n\n{% codeblock \"HotelDocumentTest.java\" lang:java %}\n@Test\nvoid testBulkDocument() throws IOException {\n    // 使用mybatis-plus获取所有的记录\n    List<Hotel> list = service.list();\n\n    BulkRequest.Builder builder = new BulkRequest.Builder();\n    // 设置索引库\n    builder.index(\"hotel\");\n\n    // 遍历记录\n    for (Hotel hotel : list) {\n        // 添加数据\n        builder.operations(o -> o // lambda\n                           .create(v -> v // lambda\n                                   // 读入id\n                                   .id(hotel.getId().toString())\n                                   // 读入文档\n                                   .document(new HotelDoc(hotel))\n                                   // 设置索引库\n                                   .index(\"hotel\")\n                                  )\n                          );\n    }\n\n    // 执行批量插入，并获取是否发生了错误\n    System.out.println(esClient.bulk(builder.build()).errors());\n}\n{% endcodeblock %}\n\n批量导入成功打印：\n\n![批量导入文档成功](/images/es-doc-client-bulkSuccess.png)\n\n# 结语\n\n由于本人第一次写这样的博客，所以可能有一些地方没有考虑到，希望有大佬可以指出问题。感谢\n","slug":"elasticsearch-java","published":1,"date":"2022-05-22T11:11:12.813Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl59671m1000384uqf8x8b6po","content":"<p>由于自己在学 <strong>elasticsearch-java</strong> 客户端的 8.1.2 版本的时候由于网上教程很少，学的很吃力。所以决定自己写一篇博客来记录一下。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"导入-jar-包\"><a href=\"#导入-jar-包\" class=\"headerlink\" title=\"导入 jar 包\"></a>导入 jar 包</h1><figure class=\"highlight xml\"><figcaption><span>pom.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>co.elastic.clients<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>elasticsearch-java<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>8.1.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"开始编写代码\"><a href=\"#开始编写代码\" class=\"headerlink\" title=\"开始编写代码\"></a>开始编写代码</h1><h2 id=\"注入-esClient-的-Bean\"><a href=\"#注入-esClient-的-Bean\" class=\"headerlink\" title=\"注入 esClient 的 Bean\"></a>注入 esClient 的 Bean</h2><p>因为我们这个客户端对象需要多次使用，每次实例化再配置就很不方便。所以我们可以写一个 <code>Configuration</code> 来自动注入 springboot。</p>\n<p>先来理一下我们需要干什么事情：</p>\n<ul>\n<li>创建 <code>Configuration</code> 类</li>\n<li>使用 <code>ConfigurationProperties</code> 实现自动读取 yaml 配置（因为 host 地址是容易变的）</li>\n</ul>\n<figure class=\"highlight java\"><figcaption><span>ElasticsearchConfig.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> CHENPrime-coder &lt;chenbprime@outlook.com&gt;</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-meta\">@ConfigurationProperties</span> (prefix = <span class=\"hljs-string\">&quot;es.config&quot;</span>)<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ElasticsearchConfig</span> &#123;<br><br>    <span class=\"hljs-comment\">// 需要动态变化的 host 地址</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">esServerAddress</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>;<br><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getEsServerAddress</span> <span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> esServerAddress;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setEsServerAddress</span> <span class=\"hljs-params\">(String esServerAddress)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.esServerAddress = esServerAddress;<br>    &#125;<br><br>    <span class=\"hljs-comment\">//esClient 的 Bean</span><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> ElasticsearchClient <span class=\"hljs-title function_\">esClient</span> <span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">// 1. 构造 RestClient，端口是 9200</span><br>        <span class=\"hljs-type\">RestClient</span> <span class=\"hljs-variable\">client</span> <span class=\"hljs-operator\">=</span> RestClient.builder (<br>                <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HttpHost</span> (esServerAddress, <span class=\"hljs-number\">9200</span>)<br>        ).build ();<br>        <span class=\"hljs-comment\">// 2. json 转换配置，这里使用 Jackson</span><br>        <span class=\"hljs-type\">ElasticsearchTransport</span> <span class=\"hljs-variable\">transport</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RestClientTransport</span> (<br>                client, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JacksonJsonpMapper</span> ()<br>        );<br>        <span class=\"hljs-comment\">// 3. 构造 ElasticsearchClient</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ElasticsearchClient</span> (transport);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"修改-application-yaml-配置文件\"><a href=\"#修改-application-yaml-配置文件\" class=\"headerlink\" title=\"修改 application.yaml 配置文件\"></a>修改 application.yaml 配置文件</h2><p>使用 yaml 配置 host 地址，这里假设我们需要使用 <code>docker</code> 部署，所以修改为 <code>es-server</code>（容器名）。</p>\n<figure class=\"highlight yaml\"><figcaption><span>application.yaml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">es:</span><br>  <span class=\"hljs-attr\">config:</span><br>    <span class=\"hljs-comment\"># 这里写上主机地址（host），也可以写 ip 地址（如：127.0.0.1）</span><br>    <span class=\"hljs-attr\">es-server-address:</span> <span class=\"hljs-string\">es-server</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"索引库操作\"><a href=\"#索引库操作\" class=\"headerlink\" title=\"索引库操作\"></a>索引库操作</h2><p>首先我们先在 <code>test</code> 包下创建测试类 <code>HotelIndexTest.java</code>，开始测试客户端（Junit）。下面的代码中 <code>beforeAll</code> 方法和 <code>afterAll</code> 分别是初始化客户端和关闭客户端，使用原始的方式。这里我们使用 springboot 的自动注入 esClient。</p>\n<p>我们先把代码的基本框架写好，再去写具体的凭借条件并查询</p>\n<figure class=\"highlight java\"><figcaption><span>HotelIndexTest.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@SpringBootTest</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HotelIndexTest</span> &#123;<br><br>    <span class=\"hljs-comment\">// 注入 esClient</span><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">static</span> ElasticsearchClient esClient;<br><br>    <span class=\"hljs-comment\">// @BeforeAll</span><br>    <span class=\"hljs-comment\">//static void beforeAll () &#123;</span><br>    <span class=\"hljs-comment\">//     restClient = RestClient.builder (</span><br>    <span class=\"hljs-comment\">//             new HttpHost (&quot;192.168.118.10&quot;, 9200)).build ();</span><br>    <span class=\"hljs-comment\">//     ElasticsearchTransport transport = new RestClientTransport (</span><br>    <span class=\"hljs-comment\">//             restClient, new JacksonJsonpMapper ()</span><br>    <span class=\"hljs-comment\">//     );</span><br>    <span class=\"hljs-comment\">// </span><br>    <span class=\"hljs-comment\">//     esClient = new ElasticsearchClient (transport);</span><br>    <span class=\"hljs-comment\">// &#125;</span><br><br>    <span class=\"hljs-comment\">// @AfterAll</span><br>    <span class=\"hljs-comment\">//static void afterAll () throws IOException &#123;</span><br>    <span class=\"hljs-comment\">//     restClient.close ();</span><br>    <span class=\"hljs-comment\">// &#125;</span><br><br>    <span class=\"hljs-comment\">// 创建索引库</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">createIndex</span> <span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 删除索引库</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">deleteIndex</span> <span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 判断索引库是否存在</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">existsIndex</span> <span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>elasticsearc-java 使用了大量的建造器模式，有各种各样的 Builder。并且需要一定的 <code>lambda</code> 基础，建议先学一下 lambda 再写代码</p>\n</blockquote>\n<h3 id=\"创建索引库\"><a href=\"#创建索引库\" class=\"headerlink\" title=\"创建索引库\"></a>创建索引库</h3><p>既然是创建索引库，并且上面也讲了需要用 XXXBuilder 来构造查询语句。所以我们需要使用 <code>CreateIndexRequest.Builder</code> 来创建索引库</p>\n<p>创建索引库既可以用 json 字符串创建，也可以使用 lambda 的方式创建。这里我们先使用 json 演示，我们需要先创建一个常量类包装 json 字符串。这里的 json 写法和 DSL 的写法是一样的，由于本文的重心并不是 DSL，所以这里就不赘述了</p>\n<figure class=\"highlight java\"><figcaption><span>HotelConstants.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> CHENPrime-coder &lt;chenbprime@outlook.com&gt;</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HotelConstants</span> &#123;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">MAPPING_TEMPLATE</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;&#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;mappings\\&quot;: &#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;properties\\&quot;: &#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;id\\&quot;: &#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;type\\&quot;: \\&quot;keyword\\&quot;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;name\\&quot;: &#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;type\\&quot;: \\&quot;text\\&quot;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;analyzer\\&quot;: \\&quot;ik_max_word\\&quot;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;copy_to\\&quot;: \\&quot;all\\&quot;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;address\\&quot;: &#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;type\\&quot;: \\&quot;keyword\\&quot;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;index\\&quot;: false\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;price\\&quot;: &#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;type\\&quot;: \\&quot;integer\\&quot;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;score\\&quot;: &#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;type\\&quot;: \\&quot;integer\\&quot;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;brand\\&quot;: &#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;type\\&quot;: \\&quot;keyword\\&quot;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;copy_to\\&quot;: \\&quot;all\\&quot;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;city\\&quot;: &#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;type\\&quot;: \\&quot;keyword\\&quot;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;copy_to\\&quot;: \\&quot;all\\&quot;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;starName\\&quot;: &#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;type\\&quot;: \\&quot;keyword\\&quot;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;copy_to\\&quot;: \\&quot;all\\&quot;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;business\\&quot;: &#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;type\\&quot;: \\&quot;keyword\\&quot;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;copy_to\\&quot;: \\&quot;all\\&quot;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;location\\&quot;: &#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;type\\&quot;: \\&quot;geo_point\\&quot;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;pic\\&quot;: &#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;type\\&quot;: \\&quot;keyword\\&quot;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;index\\&quot;: false\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;all\\&quot;: &#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;type\\&quot;: \\&quot;text\\&quot;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;analyzer\\&quot;: \\&quot;ik_max_word\\&quot;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;&quot;</span>;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">USER_MAPPING</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;&#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;mappings\\&quot;: &#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;properties\\&quot;: &#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;info\\&quot;: &#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;type\\&quot;: \\&quot;text\\&quot;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;analyzer\\&quot;: \\&quot;ik_smart\\&quot;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;email\\&quot;: &#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;index\\&quot;: false,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;type\\&quot;: \\&quot;keyword\\&quot;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;name\\&quot;: &#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;type\\&quot;: \\&quot;object\\&quot;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;properties\\&quot;: &#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;firstName\\&quot;: &#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;type\\&quot;: \\&quot;keyword\\&quot;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;lastName\\&quot;: &#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;type\\&quot;: \\&quot;keyword\\&quot;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>然后我们就可以开始写具体的搜索请求了</p>\n<figure class=\"highlight java\"><figcaption><span>HotelIndexTest.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">createIndex</span> <span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    <span class=\"hljs-comment\">// 以 ByteArrayInputStream 读入字符串</span><br>    <span class=\"hljs-type\">ByteArrayInputStream</span> <span class=\"hljs-variable\">inputStream</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ByteArrayInputStream</span> (USER_MAPPING.getBytes (StandardCharsets.UTF_8));<br><br>    <span class=\"hljs-comment\">// 实例化建造器</span><br>    CreateIndexRequest.<span class=\"hljs-type\">Builder</span> <span class=\"hljs-variable\">builder</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CreateIndexRequest</span>.Builder ();<br>    <span class=\"hljs-comment\">// 设置索引库的名字</span><br>    builder.index (<span class=\"hljs-string\">&quot;user&quot;</span>);<br>    <span class=\"hljs-comment\">// 使用 json 方式创建索引库</span><br>    builder.withJson (inputStream);<br>    <span class=\"hljs-comment\">// 构造请求</span><br>    <span class=\"hljs-type\">CreateIndexRequest</span> <span class=\"hljs-variable\">request</span> <span class=\"hljs-operator\">=</span> builder.build ();<br><br>    <span class=\"hljs-comment\">// 使用 esClient 测试请求并返回结果</span><br>    System.out.println (esClient.indices ().create (request).acknowledged ());<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>这里输出的 <code>acknowledged</code> 为 <code>true</code> 就说明索引库创建成功了，下面的 <code>acknowledged</code> 也同理</p>\n<h3 id=\"删除索引库\"><a href=\"#删除索引库\" class=\"headerlink\" title=\"删除索引库\"></a>删除索引库</h3><p>索引库的删除操作十分简单，我们只需要指定索引库名称就可以实现索引库的删除</p>\n<figure class=\"highlight java\"><figcaption><span>HotelIndexTest.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">deleteIndex</span> <span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    DeleteIndexRequest.<span class=\"hljs-type\">Builder</span> <span class=\"hljs-variable\">builder</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DeleteIndexRequest</span>.Builder ();<br>    builder.index (<span class=\"hljs-string\">&quot;user&quot;</span>);<br><br>    System.out.println (esClient.indices ().delete (builder.build ()).acknowledged ());<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"判断索引库是否存在\"><a href=\"#判断索引库是否存在\" class=\"headerlink\" title=\"判断索引库是否存在\"></a>判断索引库是否存在</h3><p>判断索引库是否存在也很简单，指定一个索引库名就可以了</p>\n<figure class=\"highlight java\"><figcaption><span>HotelIndexTest.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">existsIndex</span> <span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    ExistsRequest.<span class=\"hljs-type\">Builder</span> <span class=\"hljs-variable\">builder</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ExistsRequest</span>.Builder ();<br>    builder.index (<span class=\"hljs-string\">&quot;user&quot;</span>);<br><br>    System.out.println (esClient.indices ().exists (builder.build ()).value ());<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"文档简单操作\"><a href=\"#文档简单操作\" class=\"headerlink\" title=\"文档简单操作\"></a>文档简单操作</h2><p>elasticsearch 的文档操作比较麻烦，需要单独创建一个 es 文档的 POJO（XXXDoc），这里创建一个 <code>HotelDoc</code> 的 POJO 这结构需要和创建索引库时的结构相同。</p>\n<p>我们来分析一下特殊字段该怎么处理（其实也就一个特殊字段）：</p>\n<ul>\n<li>location 地理位置字段，这里由于 Hotel 原始 POJO 里面并没有这么一个字段，所以我们需要根据 es 中经纬度的写法来转换格式</li>\n</ul>\n<figure class=\"highlight java\"><figcaption><span>HotelDoc.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> CHENPrime-coder &lt;chenbprime@outlook.com&gt;</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-meta\">@NoArgsConstructor</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HotelDoc</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> Long id;<br>    <span class=\"hljs-keyword\">private</span> String name;<br>    <span class=\"hljs-keyword\">private</span> String address;<br>    <span class=\"hljs-keyword\">private</span> Integer price;<br>    <span class=\"hljs-keyword\">private</span> Integer score;<br>    <span class=\"hljs-keyword\">private</span> String brand;<br>    <span class=\"hljs-keyword\">private</span> String city;<br>    <span class=\"hljs-keyword\">private</span> String starName;<br>    <span class=\"hljs-keyword\">private</span> String business;<br>    <span class=\"hljs-keyword\">private</span> String location;<br>    <span class=\"hljs-keyword\">private</span> String pic;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">HotelDoc</span> <span class=\"hljs-params\">(Hotel hotel)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.id = hotel.getId ();<br>        <span class=\"hljs-built_in\">this</span>.name = hotel.getName ();<br>        <span class=\"hljs-built_in\">this</span>.address = hotel.getAddress ();<br>        <span class=\"hljs-built_in\">this</span>.price = hotel.getPrice ();<br>        <span class=\"hljs-built_in\">this</span>.score = hotel.getScore ();<br>        <span class=\"hljs-built_in\">this</span>.brand = hotel.getBrand ();<br>        <span class=\"hljs-built_in\">this</span>.city = hotel.getCity ();<br>        <span class=\"hljs-built_in\">this</span>.starName = hotel.getStarName ();<br>        <span class=\"hljs-built_in\">this</span>.business = hotel.getBusiness ();<br>        <span class=\"hljs-built_in\">this</span>.location = hotel.getLatitude () + <span class=\"hljs-string\">&quot;,&quot;</span> + hotel.getLongitude ();<br>        <span class=\"hljs-built_in\">this</span>.pic = hotel.getPic ();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>现在索引库的映射写好了，现在我们需要编写基本的框架</p>\n<figure class=\"highlight java\"><figcaption><span>HotelDocumentTest.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> CHENPrime-coder &lt;chenbprime@outlook.com&gt;</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@SpringBootTest</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HotelDocumentTest</span> &#123;<br><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> IHotelService service;<br><br>    <span class=\"hljs-comment\">//es 客户端自动注入</span><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">static</span> ElasticsearchClient esClient;<br><br>    <span class=\"hljs-comment\">// 插入文档</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testAddDocument</span> <span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 根据 id 获取文档</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testGetDocumentById</span> <span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 根据 id 更新文档</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testUpdateDocumentById</span> <span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 根据 id 删除文档</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testDeleteDocumentById</span> <span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 批量导入文档</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testBulkDocument</span> <span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"插入文档\"><a href=\"#插入文档\" class=\"headerlink\" title=\"插入文档\"></a>插入文档</h3><p>es 客户端的文档插入操作。我们需要先根据基本的 Hotel 获取 HotelDoc 对象，这里使用封装好的 service 获取 hotel。然后使用 <code>IndexRequest.Builder</code> 构造文档插入请求</p>\n<figure class=\"highlight java\"><figcaption><span>HotelDocumentTest.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testAddDocument</span> <span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    <span class=\"hljs-type\">Hotel</span> <span class=\"hljs-variable\">hotel</span> <span class=\"hljs-operator\">=</span> service.getById (<span class=\"hljs-number\">56227L</span>);<br>    <span class=\"hljs-comment\">// 转换为文档类型</span><br>    <span class=\"hljs-type\">HotelDoc</span> <span class=\"hljs-variable\">doc</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HotelDoc</span> (hotel);<br><br>    <span class=\"hljs-comment\">// 获取建造器</span><br>    IndexRequest.Builder&lt;HotelDoc&gt; builder = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IndexRequest</span>.Builder&lt;&gt;();<br>    <span class=\"hljs-comment\">// 指定索引库名</span><br>    builder.index (<span class=\"hljs-string\">&quot;hotel&quot;</span>);<br>    <span class=\"hljs-comment\">// 设置文档 id</span><br>    builder.id (doc.getId ().toString ());<br>    <span class=\"hljs-comment\">// 读入文档</span><br>    builder.document (doc);<br><br>    <span class=\"hljs-comment\">// 执行插入操作，获取 result 并打印</span><br>    System.out.println (esClient.index (builder.build ()).result ());<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>如果一切正常，那么将会输出如下内容<br><img src=\"/images/es-doc-cliten-addSuccess.png\" alt=\"插入文档成功\"></p>\n<h3 id=\"根据-id-获取文档\"><a href=\"#根据-id-获取文档\" class=\"headerlink\" title=\"根据 id 获取文档\"></a>根据 id 获取文档</h3><p>如果只需要根据 id 获取文档，那么只需要指定索引库名和 id 就行了，下面的删除也是一样。需要注意的是，id 需要是 String 字符串类型。这里需要使用 GetRequest.Builder 建造器</p>\n<figure class=\"highlight java\"><figcaption><span>HotelDocumentTest.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testGetDocumentById</span> <span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    GetRequest.<span class=\"hljs-type\">Builder</span> <span class=\"hljs-variable\">builder</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GetRequest</span>.Builder ();<br>    <span class=\"hljs-comment\">// 设置索引库名</span><br>    builder.index (<span class=\"hljs-string\">&quot;hotel&quot;</span>);<br>    <span class=\"hljs-comment\">// 设置文档 id</span><br>    builder.id (<span class=\"hljs-string\">&quot;36934&quot;</span>);<br>\t<br>    <span class=\"hljs-comment\">//\t\t\t\t\t\t\t\t传入 GetRequest\t设置返回的对象类型</span><br>    System.out.println (esClient.get (builder.build (), HotelDoc.class).source ());<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>获取成功的结果打印：</p>\n<p><img src=\"/images/es-doc-client-getByIdSucces.png\" alt=\"获取文档成功\"></p>\n<h3 id=\"根据-id-更新文档\"><a href=\"#根据-id-更新文档\" class=\"headerlink\" title=\"根据 id 更新文档\"></a>根据 id 更新文档</h3><p>修改文档有两种方式</p>\n<ul>\n<li>方式一：全量更新，再次写入 id 一样的文档，就会删除旧文档，添加新文档</li>\n<li>方式二：局部更新，更新部分字段</li>\n</ul>\n<p>这里使用第二种方式</p>\n<p>更新文档需要使用 <code>UpdateRequest.Builder</code> 建造器，并指定 id 索引库名和文档对象（这里我有一个问题，<code>UpdateRequest.Builder&lt;HotelDoc, HotelDoc&gt;</code> 中的两个泛型分别是什么意思？希望有大佬再评论区指出，感谢）</p>\n<figure class=\"highlight java\"><figcaption><span>HotelDocumentTest.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testUpdateDocumentById</span> <span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    <span class=\"hljs-type\">Hotel</span> <span class=\"hljs-variable\">hotel</span> <span class=\"hljs-operator\">=</span> service.getById (<span class=\"hljs-number\">36934L</span>);<br>    <span class=\"hljs-comment\">// 转换为文档类型</span><br>    <span class=\"hljs-type\">HotelDoc</span> <span class=\"hljs-variable\">doc</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HotelDoc</span> (hotel);<br>    <span class=\"hljs-comment\">// 修改数据</span><br>    doc.setName (<span class=\"hljs-string\">&quot;修改酒店名字测试&quot;</span>);<br><br>    <span class=\"hljs-comment\">//                    修改的类型  数据类型？ </span><br>    UpdateRequest.Builder&lt;HotelDoc, HotelDoc&gt; builder = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UpdateRequest</span>.Builder&lt;&gt;();<br>    <span class=\"hljs-comment\">// 设置索引库名</span><br>    builder.index (<span class=\"hljs-string\">&quot;hotel&quot;</span>);<br>    <span class=\"hljs-comment\">// 设置 id</span><br>    builder.id (<span class=\"hljs-string\">&quot;36934&quot;</span>);<br>    <span class=\"hljs-comment\">// 读入文档对象</span><br>    builder.doc (doc);<br><br>    <span class=\"hljs-comment\">// 执行修改操作                                        修改类型         获取状态</span><br>    System.out.println (esClient.update (builder.build (), HotelDoc.class).result ());<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>更新成功后的结果打印：</p>\n<p><img src=\"/images/es-doc-client-updateSuccess.png\" alt=\"更新文档成功\"></p>\n<h3 id=\"根据-id-删除文档\"><a href=\"#根据-id-删除文档\" class=\"headerlink\" title=\"根据 id 删除文档\"></a>根据 id 删除文档</h3><p>删除文档很简单，指定文档 id 和索引库名就好了。这里就不过多赘述了</p>\n<figure class=\"highlight java\"><figcaption><span>HotelDocumentTest.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testDeleteDocumentById</span> <span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    DeleteRequest.<span class=\"hljs-type\">Builder</span> <span class=\"hljs-variable\">builder</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DeleteRequest</span>.Builder ();<br>    builder.index (<span class=\"hljs-string\">&quot;hotel&quot;</span>);<br>    builder.id (<span class=\"hljs-string\">&quot;36934&quot;</span>);<br><br>    System.out.println (esClient.delete (builder.build ()).result ());<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>删除成功打印：</p>\n<p><img src=\"/images/es-doc-client-deleteSuccess.png\" alt=\"删除文档成功\"></p>\n<h3 id=\"批量导入文档\"><a href=\"#批量导入文档\" class=\"headerlink\" title=\"批量导入文档\"></a>批量导入文档</h3><p>批量导入文档就需要写一点 lambda 的语法了。其实也不难。只需要遍历然后放入请求建造器就 ok 了</p>\n<figure class=\"highlight java\"><figcaption><span>HotelDocumentTest.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testBulkDocument</span> <span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    <span class=\"hljs-comment\">// 使用 mybatis-plus 获取所有的记录</span><br>    List&lt;Hotel&gt; list = service.list ();<br><br>    BulkRequest.<span class=\"hljs-type\">Builder</span> <span class=\"hljs-variable\">builder</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BulkRequest</span>.Builder ();<br>    <span class=\"hljs-comment\">// 设置索引库</span><br>    builder.index (<span class=\"hljs-string\">&quot;hotel&quot;</span>);<br><br>    <span class=\"hljs-comment\">// 遍历记录</span><br>    <span class=\"hljs-keyword\">for</span> (Hotel hotel : list) &#123;<br>        <span class=\"hljs-comment\">// 添加数据</span><br>        builder.operations (o -&gt; o <span class=\"hljs-comment\">//lambda</span><br>                           .create (v -&gt; v <span class=\"hljs-comment\">//lambda</span><br>                                   <span class=\"hljs-comment\">// 读入 id</span><br>                                   .id (hotel.getId ().toString ())<br>                                   <span class=\"hljs-comment\">// 读入文档</span><br>                                   .document (<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HotelDoc</span> (hotel))<br>                                   <span class=\"hljs-comment\">// 设置索引库</span><br>                                   .index (<span class=\"hljs-string\">&quot;hotel&quot;</span>)<br>                                  )<br>                          );<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 执行批量插入，并获取是否发生了错误</span><br>    System.out.println (esClient.bulk (builder.build ()).errors ());<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>批量导入成功打印：</p>\n<p><img src=\"/images/es-doc-client-bulkSuccess.png\" alt=\"批量导入文档成功\"></p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>由于本人第一次写这样的博客，所以可能有一些地方没有考虑到，希望有大佬可以指出问题。感谢</p>\n","site":{"data":{}},"excerpt":"<p>由于自己在学 <strong>elasticsearch-java</strong> 客户端的 8.1.2 版本的时候由于网上教程很少，学的很吃力。所以决定自己写一篇博客来记录一下。</p>","more":"<h1 id=\"导入-jar-包\"><a href=\"#导入-jar-包\" class=\"headerlink\" title=\"导入 jar 包\"></a>导入 jar 包</h1><figure class=\"highlight xml\"><figcaption><span>pom.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>co.elastic.clients<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>elasticsearch-java<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>8.1.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"开始编写代码\"><a href=\"#开始编写代码\" class=\"headerlink\" title=\"开始编写代码\"></a>开始编写代码</h1><h2 id=\"注入-esClient-的-Bean\"><a href=\"#注入-esClient-的-Bean\" class=\"headerlink\" title=\"注入 esClient 的 Bean\"></a>注入 esClient 的 Bean</h2><p>因为我们这个客户端对象需要多次使用，每次实例化再配置就很不方便。所以我们可以写一个 <code>Configuration</code> 来自动注入 springboot。</p>\n<p>先来理一下我们需要干什么事情：</p>\n<ul>\n<li>创建 <code>Configuration</code> 类</li>\n<li>使用 <code>ConfigurationProperties</code> 实现自动读取 yaml 配置（因为 host 地址是容易变的）</li>\n</ul>\n<figure class=\"highlight java\"><figcaption><span>ElasticsearchConfig.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> CHENPrime-coder &lt;chenbprime@outlook.com&gt;</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-meta\">@ConfigurationProperties</span> (prefix = <span class=\"hljs-string\">&quot;es.config&quot;</span>)<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ElasticsearchConfig</span> &#123;<br><br>    <span class=\"hljs-comment\">// 需要动态变化的 host 地址</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">esServerAddress</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>;<br><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getEsServerAddress</span> <span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> esServerAddress;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setEsServerAddress</span> <span class=\"hljs-params\">(String esServerAddress)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.esServerAddress = esServerAddress;<br>    &#125;<br><br>    <span class=\"hljs-comment\">//esClient 的 Bean</span><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> ElasticsearchClient <span class=\"hljs-title function_\">esClient</span> <span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">// 1. 构造 RestClient，端口是 9200</span><br>        <span class=\"hljs-type\">RestClient</span> <span class=\"hljs-variable\">client</span> <span class=\"hljs-operator\">=</span> RestClient.builder (<br>                <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HttpHost</span> (esServerAddress, <span class=\"hljs-number\">9200</span>)<br>        ).build ();<br>        <span class=\"hljs-comment\">// 2. json 转换配置，这里使用 Jackson</span><br>        <span class=\"hljs-type\">ElasticsearchTransport</span> <span class=\"hljs-variable\">transport</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RestClientTransport</span> (<br>                client, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JacksonJsonpMapper</span> ()<br>        );<br>        <span class=\"hljs-comment\">// 3. 构造 ElasticsearchClient</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ElasticsearchClient</span> (transport);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"修改-application-yaml-配置文件\"><a href=\"#修改-application-yaml-配置文件\" class=\"headerlink\" title=\"修改 application.yaml 配置文件\"></a>修改 application.yaml 配置文件</h2><p>使用 yaml 配置 host 地址，这里假设我们需要使用 <code>docker</code> 部署，所以修改为 <code>es-server</code>（容器名）。</p>\n<figure class=\"highlight yaml\"><figcaption><span>application.yaml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">es:</span><br>  <span class=\"hljs-attr\">config:</span><br>    <span class=\"hljs-comment\"># 这里写上主机地址（host），也可以写 ip 地址（如：127.0.0.1）</span><br>    <span class=\"hljs-attr\">es-server-address:</span> <span class=\"hljs-string\">es-server</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"索引库操作\"><a href=\"#索引库操作\" class=\"headerlink\" title=\"索引库操作\"></a>索引库操作</h2><p>首先我们先在 <code>test</code> 包下创建测试类 <code>HotelIndexTest.java</code>，开始测试客户端（Junit）。下面的代码中 <code>beforeAll</code> 方法和 <code>afterAll</code> 分别是初始化客户端和关闭客户端，使用原始的方式。这里我们使用 springboot 的自动注入 esClient。</p>\n<p>我们先把代码的基本框架写好，再去写具体的凭借条件并查询</p>\n<figure class=\"highlight java\"><figcaption><span>HotelIndexTest.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@SpringBootTest</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HotelIndexTest</span> &#123;<br><br>    <span class=\"hljs-comment\">// 注入 esClient</span><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">static</span> ElasticsearchClient esClient;<br><br>    <span class=\"hljs-comment\">// @BeforeAll</span><br>    <span class=\"hljs-comment\">//static void beforeAll () &#123;</span><br>    <span class=\"hljs-comment\">//     restClient = RestClient.builder (</span><br>    <span class=\"hljs-comment\">//             new HttpHost (&quot;192.168.118.10&quot;, 9200)).build ();</span><br>    <span class=\"hljs-comment\">//     ElasticsearchTransport transport = new RestClientTransport (</span><br>    <span class=\"hljs-comment\">//             restClient, new JacksonJsonpMapper ()</span><br>    <span class=\"hljs-comment\">//     );</span><br>    <span class=\"hljs-comment\">// </span><br>    <span class=\"hljs-comment\">//     esClient = new ElasticsearchClient (transport);</span><br>    <span class=\"hljs-comment\">// &#125;</span><br><br>    <span class=\"hljs-comment\">// @AfterAll</span><br>    <span class=\"hljs-comment\">//static void afterAll () throws IOException &#123;</span><br>    <span class=\"hljs-comment\">//     restClient.close ();</span><br>    <span class=\"hljs-comment\">// &#125;</span><br><br>    <span class=\"hljs-comment\">// 创建索引库</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">createIndex</span> <span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 删除索引库</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">deleteIndex</span> <span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 判断索引库是否存在</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">existsIndex</span> <span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>elasticsearc-java 使用了大量的建造器模式，有各种各样的 Builder。并且需要一定的 <code>lambda</code> 基础，建议先学一下 lambda 再写代码</p>\n</blockquote>\n<h3 id=\"创建索引库\"><a href=\"#创建索引库\" class=\"headerlink\" title=\"创建索引库\"></a>创建索引库</h3><p>既然是创建索引库，并且上面也讲了需要用 XXXBuilder 来构造查询语句。所以我们需要使用 <code>CreateIndexRequest.Builder</code> 来创建索引库</p>\n<p>创建索引库既可以用 json 字符串创建，也可以使用 lambda 的方式创建。这里我们先使用 json 演示，我们需要先创建一个常量类包装 json 字符串。这里的 json 写法和 DSL 的写法是一样的，由于本文的重心并不是 DSL，所以这里就不赘述了</p>\n<figure class=\"highlight java\"><figcaption><span>HotelConstants.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> CHENPrime-coder &lt;chenbprime@outlook.com&gt;</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HotelConstants</span> &#123;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">MAPPING_TEMPLATE</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;&#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;mappings\\&quot;: &#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;properties\\&quot;: &#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;id\\&quot;: &#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;type\\&quot;: \\&quot;keyword\\&quot;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;name\\&quot;: &#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;type\\&quot;: \\&quot;text\\&quot;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;analyzer\\&quot;: \\&quot;ik_max_word\\&quot;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;copy_to\\&quot;: \\&quot;all\\&quot;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;address\\&quot;: &#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;type\\&quot;: \\&quot;keyword\\&quot;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;index\\&quot;: false\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;price\\&quot;: &#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;type\\&quot;: \\&quot;integer\\&quot;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;score\\&quot;: &#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;type\\&quot;: \\&quot;integer\\&quot;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;brand\\&quot;: &#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;type\\&quot;: \\&quot;keyword\\&quot;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;copy_to\\&quot;: \\&quot;all\\&quot;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;city\\&quot;: &#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;type\\&quot;: \\&quot;keyword\\&quot;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;copy_to\\&quot;: \\&quot;all\\&quot;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;starName\\&quot;: &#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;type\\&quot;: \\&quot;keyword\\&quot;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;copy_to\\&quot;: \\&quot;all\\&quot;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;business\\&quot;: &#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;type\\&quot;: \\&quot;keyword\\&quot;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;copy_to\\&quot;: \\&quot;all\\&quot;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;location\\&quot;: &#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;type\\&quot;: \\&quot;geo_point\\&quot;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;pic\\&quot;: &#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;type\\&quot;: \\&quot;keyword\\&quot;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;index\\&quot;: false\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;all\\&quot;: &#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;type\\&quot;: \\&quot;text\\&quot;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;analyzer\\&quot;: \\&quot;ik_max_word\\&quot;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;&quot;</span>;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">USER_MAPPING</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;&#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;mappings\\&quot;: &#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;properties\\&quot;: &#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;info\\&quot;: &#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;type\\&quot;: \\&quot;text\\&quot;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;analyzer\\&quot;: \\&quot;ik_smart\\&quot;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;email\\&quot;: &#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;index\\&quot;: false,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;type\\&quot;: \\&quot;keyword\\&quot;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;name\\&quot;: &#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;type\\&quot;: \\&quot;object\\&quot;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;properties\\&quot;: &#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;firstName\\&quot;: &#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;type\\&quot;: \\&quot;keyword\\&quot;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;,\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;lastName\\&quot;: &#123;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;\\&quot;type\\&quot;: \\&quot;keyword\\&quot;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;\\n&quot;</span> +<br>            <span class=\"hljs-string\">&quot;&#125;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>然后我们就可以开始写具体的搜索请求了</p>\n<figure class=\"highlight java\"><figcaption><span>HotelIndexTest.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">createIndex</span> <span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    <span class=\"hljs-comment\">// 以 ByteArrayInputStream 读入字符串</span><br>    <span class=\"hljs-type\">ByteArrayInputStream</span> <span class=\"hljs-variable\">inputStream</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ByteArrayInputStream</span> (USER_MAPPING.getBytes (StandardCharsets.UTF_8));<br><br>    <span class=\"hljs-comment\">// 实例化建造器</span><br>    CreateIndexRequest.<span class=\"hljs-type\">Builder</span> <span class=\"hljs-variable\">builder</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CreateIndexRequest</span>.Builder ();<br>    <span class=\"hljs-comment\">// 设置索引库的名字</span><br>    builder.index (<span class=\"hljs-string\">&quot;user&quot;</span>);<br>    <span class=\"hljs-comment\">// 使用 json 方式创建索引库</span><br>    builder.withJson (inputStream);<br>    <span class=\"hljs-comment\">// 构造请求</span><br>    <span class=\"hljs-type\">CreateIndexRequest</span> <span class=\"hljs-variable\">request</span> <span class=\"hljs-operator\">=</span> builder.build ();<br><br>    <span class=\"hljs-comment\">// 使用 esClient 测试请求并返回结果</span><br>    System.out.println (esClient.indices ().create (request).acknowledged ());<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>这里输出的 <code>acknowledged</code> 为 <code>true</code> 就说明索引库创建成功了，下面的 <code>acknowledged</code> 也同理</p>\n<h3 id=\"删除索引库\"><a href=\"#删除索引库\" class=\"headerlink\" title=\"删除索引库\"></a>删除索引库</h3><p>索引库的删除操作十分简单，我们只需要指定索引库名称就可以实现索引库的删除</p>\n<figure class=\"highlight java\"><figcaption><span>HotelIndexTest.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">deleteIndex</span> <span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    DeleteIndexRequest.<span class=\"hljs-type\">Builder</span> <span class=\"hljs-variable\">builder</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DeleteIndexRequest</span>.Builder ();<br>    builder.index (<span class=\"hljs-string\">&quot;user&quot;</span>);<br><br>    System.out.println (esClient.indices ().delete (builder.build ()).acknowledged ());<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"判断索引库是否存在\"><a href=\"#判断索引库是否存在\" class=\"headerlink\" title=\"判断索引库是否存在\"></a>判断索引库是否存在</h3><p>判断索引库是否存在也很简单，指定一个索引库名就可以了</p>\n<figure class=\"highlight java\"><figcaption><span>HotelIndexTest.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">existsIndex</span> <span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    ExistsRequest.<span class=\"hljs-type\">Builder</span> <span class=\"hljs-variable\">builder</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ExistsRequest</span>.Builder ();<br>    builder.index (<span class=\"hljs-string\">&quot;user&quot;</span>);<br><br>    System.out.println (esClient.indices ().exists (builder.build ()).value ());<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"文档简单操作\"><a href=\"#文档简单操作\" class=\"headerlink\" title=\"文档简单操作\"></a>文档简单操作</h2><p>elasticsearch 的文档操作比较麻烦，需要单独创建一个 es 文档的 POJO（XXXDoc），这里创建一个 <code>HotelDoc</code> 的 POJO 这结构需要和创建索引库时的结构相同。</p>\n<p>我们来分析一下特殊字段该怎么处理（其实也就一个特殊字段）：</p>\n<ul>\n<li>location 地理位置字段，这里由于 Hotel 原始 POJO 里面并没有这么一个字段，所以我们需要根据 es 中经纬度的写法来转换格式</li>\n</ul>\n<figure class=\"highlight java\"><figcaption><span>HotelDoc.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> CHENPrime-coder &lt;chenbprime@outlook.com&gt;</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-meta\">@NoArgsConstructor</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HotelDoc</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> Long id;<br>    <span class=\"hljs-keyword\">private</span> String name;<br>    <span class=\"hljs-keyword\">private</span> String address;<br>    <span class=\"hljs-keyword\">private</span> Integer price;<br>    <span class=\"hljs-keyword\">private</span> Integer score;<br>    <span class=\"hljs-keyword\">private</span> String brand;<br>    <span class=\"hljs-keyword\">private</span> String city;<br>    <span class=\"hljs-keyword\">private</span> String starName;<br>    <span class=\"hljs-keyword\">private</span> String business;<br>    <span class=\"hljs-keyword\">private</span> String location;<br>    <span class=\"hljs-keyword\">private</span> String pic;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">HotelDoc</span> <span class=\"hljs-params\">(Hotel hotel)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.id = hotel.getId ();<br>        <span class=\"hljs-built_in\">this</span>.name = hotel.getName ();<br>        <span class=\"hljs-built_in\">this</span>.address = hotel.getAddress ();<br>        <span class=\"hljs-built_in\">this</span>.price = hotel.getPrice ();<br>        <span class=\"hljs-built_in\">this</span>.score = hotel.getScore ();<br>        <span class=\"hljs-built_in\">this</span>.brand = hotel.getBrand ();<br>        <span class=\"hljs-built_in\">this</span>.city = hotel.getCity ();<br>        <span class=\"hljs-built_in\">this</span>.starName = hotel.getStarName ();<br>        <span class=\"hljs-built_in\">this</span>.business = hotel.getBusiness ();<br>        <span class=\"hljs-built_in\">this</span>.location = hotel.getLatitude () + <span class=\"hljs-string\">&quot;,&quot;</span> + hotel.getLongitude ();<br>        <span class=\"hljs-built_in\">this</span>.pic = hotel.getPic ();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>现在索引库的映射写好了，现在我们需要编写基本的框架</p>\n<figure class=\"highlight java\"><figcaption><span>HotelDocumentTest.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> CHENPrime-coder &lt;chenbprime@outlook.com&gt;</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@SpringBootTest</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HotelDocumentTest</span> &#123;<br><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> IHotelService service;<br><br>    <span class=\"hljs-comment\">//es 客户端自动注入</span><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">static</span> ElasticsearchClient esClient;<br><br>    <span class=\"hljs-comment\">// 插入文档</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testAddDocument</span> <span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 根据 id 获取文档</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testGetDocumentById</span> <span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 根据 id 更新文档</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testUpdateDocumentById</span> <span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 根据 id 删除文档</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testDeleteDocumentById</span> <span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 批量导入文档</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testBulkDocument</span> <span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"插入文档\"><a href=\"#插入文档\" class=\"headerlink\" title=\"插入文档\"></a>插入文档</h3><p>es 客户端的文档插入操作。我们需要先根据基本的 Hotel 获取 HotelDoc 对象，这里使用封装好的 service 获取 hotel。然后使用 <code>IndexRequest.Builder</code> 构造文档插入请求</p>\n<figure class=\"highlight java\"><figcaption><span>HotelDocumentTest.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testAddDocument</span> <span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    <span class=\"hljs-type\">Hotel</span> <span class=\"hljs-variable\">hotel</span> <span class=\"hljs-operator\">=</span> service.getById (<span class=\"hljs-number\">56227L</span>);<br>    <span class=\"hljs-comment\">// 转换为文档类型</span><br>    <span class=\"hljs-type\">HotelDoc</span> <span class=\"hljs-variable\">doc</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HotelDoc</span> (hotel);<br><br>    <span class=\"hljs-comment\">// 获取建造器</span><br>    IndexRequest.Builder&lt;HotelDoc&gt; builder = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IndexRequest</span>.Builder&lt;&gt;();<br>    <span class=\"hljs-comment\">// 指定索引库名</span><br>    builder.index (<span class=\"hljs-string\">&quot;hotel&quot;</span>);<br>    <span class=\"hljs-comment\">// 设置文档 id</span><br>    builder.id (doc.getId ().toString ());<br>    <span class=\"hljs-comment\">// 读入文档</span><br>    builder.document (doc);<br><br>    <span class=\"hljs-comment\">// 执行插入操作，获取 result 并打印</span><br>    System.out.println (esClient.index (builder.build ()).result ());<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>如果一切正常，那么将会输出如下内容<br><img src=\"/images/es-doc-cliten-addSuccess.png\" alt=\"插入文档成功\"></p>\n<h3 id=\"根据-id-获取文档\"><a href=\"#根据-id-获取文档\" class=\"headerlink\" title=\"根据 id 获取文档\"></a>根据 id 获取文档</h3><p>如果只需要根据 id 获取文档，那么只需要指定索引库名和 id 就行了，下面的删除也是一样。需要注意的是，id 需要是 String 字符串类型。这里需要使用 GetRequest.Builder 建造器</p>\n<figure class=\"highlight java\"><figcaption><span>HotelDocumentTest.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testGetDocumentById</span> <span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    GetRequest.<span class=\"hljs-type\">Builder</span> <span class=\"hljs-variable\">builder</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GetRequest</span>.Builder ();<br>    <span class=\"hljs-comment\">// 设置索引库名</span><br>    builder.index (<span class=\"hljs-string\">&quot;hotel&quot;</span>);<br>    <span class=\"hljs-comment\">// 设置文档 id</span><br>    builder.id (<span class=\"hljs-string\">&quot;36934&quot;</span>);<br>\t<br>    <span class=\"hljs-comment\">//\t\t\t\t\t\t\t\t传入 GetRequest\t设置返回的对象类型</span><br>    System.out.println (esClient.get (builder.build (), HotelDoc.class).source ());<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>获取成功的结果打印：</p>\n<p><img src=\"/images/es-doc-client-getByIdSucces.png\" alt=\"获取文档成功\"></p>\n<h3 id=\"根据-id-更新文档\"><a href=\"#根据-id-更新文档\" class=\"headerlink\" title=\"根据 id 更新文档\"></a>根据 id 更新文档</h3><p>修改文档有两种方式</p>\n<ul>\n<li>方式一：全量更新，再次写入 id 一样的文档，就会删除旧文档，添加新文档</li>\n<li>方式二：局部更新，更新部分字段</li>\n</ul>\n<p>这里使用第二种方式</p>\n<p>更新文档需要使用 <code>UpdateRequest.Builder</code> 建造器，并指定 id 索引库名和文档对象（这里我有一个问题，<code>UpdateRequest.Builder&lt;HotelDoc, HotelDoc&gt;</code> 中的两个泛型分别是什么意思？希望有大佬再评论区指出，感谢）</p>\n<figure class=\"highlight java\"><figcaption><span>HotelDocumentTest.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testUpdateDocumentById</span> <span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    <span class=\"hljs-type\">Hotel</span> <span class=\"hljs-variable\">hotel</span> <span class=\"hljs-operator\">=</span> service.getById (<span class=\"hljs-number\">36934L</span>);<br>    <span class=\"hljs-comment\">// 转换为文档类型</span><br>    <span class=\"hljs-type\">HotelDoc</span> <span class=\"hljs-variable\">doc</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HotelDoc</span> (hotel);<br>    <span class=\"hljs-comment\">// 修改数据</span><br>    doc.setName (<span class=\"hljs-string\">&quot;修改酒店名字测试&quot;</span>);<br><br>    <span class=\"hljs-comment\">//                    修改的类型  数据类型？ </span><br>    UpdateRequest.Builder&lt;HotelDoc, HotelDoc&gt; builder = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UpdateRequest</span>.Builder&lt;&gt;();<br>    <span class=\"hljs-comment\">// 设置索引库名</span><br>    builder.index (<span class=\"hljs-string\">&quot;hotel&quot;</span>);<br>    <span class=\"hljs-comment\">// 设置 id</span><br>    builder.id (<span class=\"hljs-string\">&quot;36934&quot;</span>);<br>    <span class=\"hljs-comment\">// 读入文档对象</span><br>    builder.doc (doc);<br><br>    <span class=\"hljs-comment\">// 执行修改操作                                        修改类型         获取状态</span><br>    System.out.println (esClient.update (builder.build (), HotelDoc.class).result ());<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>更新成功后的结果打印：</p>\n<p><img src=\"/images/es-doc-client-updateSuccess.png\" alt=\"更新文档成功\"></p>\n<h3 id=\"根据-id-删除文档\"><a href=\"#根据-id-删除文档\" class=\"headerlink\" title=\"根据 id 删除文档\"></a>根据 id 删除文档</h3><p>删除文档很简单，指定文档 id 和索引库名就好了。这里就不过多赘述了</p>\n<figure class=\"highlight java\"><figcaption><span>HotelDocumentTest.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testDeleteDocumentById</span> <span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    DeleteRequest.<span class=\"hljs-type\">Builder</span> <span class=\"hljs-variable\">builder</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DeleteRequest</span>.Builder ();<br>    builder.index (<span class=\"hljs-string\">&quot;hotel&quot;</span>);<br>    builder.id (<span class=\"hljs-string\">&quot;36934&quot;</span>);<br><br>    System.out.println (esClient.delete (builder.build ()).result ());<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>删除成功打印：</p>\n<p><img src=\"/images/es-doc-client-deleteSuccess.png\" alt=\"删除文档成功\"></p>\n<h3 id=\"批量导入文档\"><a href=\"#批量导入文档\" class=\"headerlink\" title=\"批量导入文档\"></a>批量导入文档</h3><p>批量导入文档就需要写一点 lambda 的语法了。其实也不难。只需要遍历然后放入请求建造器就 ok 了</p>\n<figure class=\"highlight java\"><figcaption><span>HotelDocumentTest.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testBulkDocument</span> <span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    <span class=\"hljs-comment\">// 使用 mybatis-plus 获取所有的记录</span><br>    List&lt;Hotel&gt; list = service.list ();<br><br>    BulkRequest.<span class=\"hljs-type\">Builder</span> <span class=\"hljs-variable\">builder</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BulkRequest</span>.Builder ();<br>    <span class=\"hljs-comment\">// 设置索引库</span><br>    builder.index (<span class=\"hljs-string\">&quot;hotel&quot;</span>);<br><br>    <span class=\"hljs-comment\">// 遍历记录</span><br>    <span class=\"hljs-keyword\">for</span> (Hotel hotel : list) &#123;<br>        <span class=\"hljs-comment\">// 添加数据</span><br>        builder.operations (o -&gt; o <span class=\"hljs-comment\">//lambda</span><br>                           .create (v -&gt; v <span class=\"hljs-comment\">//lambda</span><br>                                   <span class=\"hljs-comment\">// 读入 id</span><br>                                   .id (hotel.getId ().toString ())<br>                                   <span class=\"hljs-comment\">// 读入文档</span><br>                                   .document (<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HotelDoc</span> (hotel))<br>                                   <span class=\"hljs-comment\">// 设置索引库</span><br>                                   .index (<span class=\"hljs-string\">&quot;hotel&quot;</span>)<br>                                  )<br>                          );<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 执行批量插入，并获取是否发生了错误</span><br>    System.out.println (esClient.bulk (builder.build ()).errors ());<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>批量导入成功打印：</p>\n<p><img src=\"/images/es-doc-client-bulkSuccess.png\" alt=\"批量导入文档成功\"></p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>由于本人第一次写这样的博客，所以可能有一些地方没有考虑到，希望有大佬可以指出问题。感谢</p>"},{"title":"Spring Boot 使用 Outlook 发送邮件","cover":"/covers/GOSTBLADE3.jpg","updated":"2022-07-06T05:17:32.000Z","id":"4","toc":true,"_content":"\n就突发奇想，想写一个邮件验证码的功能。这里就先记录一下我的代码（就单纯发个邮件）\n\n<!-- more -->\n\n既然是要用到springboot的email组件，那就需要先用maven导入jar包：\n\n{% codeblock \"pom.xml\" lang:xml %}\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-mail</artifactId>\n</dependency>\n{% endcodeblock %}\n\n倒入完我们就来编写一下配置文件（核心）：\n\n{% codeblock \"application.yaml\" lang:yaml %}\nspring:\n  mail:\n    # 微软outlook的smtp服务器\n    host: smtp.office365.com\n    username: ********@outlook.com\n    # 由于这里使用微软的outlook，所以password就只需要输入你微软账号(上面的********@outlook.com)的密码就好了\n    password: ********\n    # 端口\n    port: 587\n    # 细节配置\n    properties:\n      mail.smtp.auth: true\n      mail.smtp.starttls.enable: true\n      mail.smtp.starttls.required: true\n{% endcodeblock %}\n\n接下来编写接口，这里就直接写一个get请求的接口用来测试。先写服务层\n\n{% codeblock \"MailService.java\" lang:java %}\n@Service\npublic class MailService {\n\n    @Autowired\n    JavaMailSender sender;\n\n    /**\n     * 发送邮件\n     * @param from 发件人\n     * @param to 收件人\n     * @param subject 邮件主题，标题\n     * @param text 邮件内容\n     */\n    public void sendMail(String from, String to, String subject, String text) {\n        SimpleMailMessage simpleMailMessage = new SimpleMailMessage();\n        simpleMailMessage.setFrom(from);\n        simpleMailMessage.setTo(to);\n        simpleMailMessage.setSubject(subject);\n        simpleMailMessage.setText(text);\n\n        sender.send(simpleMailMessage);\n    }\n\n}\n{% endcodeblock %}\n\n接下来编写控制器层\n\n{% codeblock \"MailService.java\" lang:java %}\n@RestController\npublic class MailController {\n\n    @Autowired\n    MailService service;\n\n    @GetMapping(\"/send\")\n    public String send() {\n        service.sendMail(\n                \"******@outlook.com\",\n                \"******@qq.com\", \n                \"Test\",\n                \"testtesttest\"\n        );\n        return \"success\";\n    }\n\n}\n{% endcodeblock %}\n\n接下来运行测试，进入浏览器访问`http://localhost:8080/send`擦看结果：\n\n![请求成功](/images/spring-mail-success.png)\n\n我们查看收件箱\n\n![邮件内容](/images/mail-success-1.png)\n\n结束，很简单吧。\n","source":"_posts/spring-boot-starter-mail.md","raw":"---\ntitle: Spring Boot 使用outlook发送邮件\ncover: /covers/GOSTBLADE3.jpg\nupdated: 2022-07-06 13:17:32\nid: 000004\ncategories:\n- java\ntags:\n- springboot\ntoc: true\n---\n\n就突发奇想，想写一个邮件验证码的功能。这里就先记录一下我的代码（就单纯发个邮件）\n\n<!-- more -->\n\n既然是要用到springboot的email组件，那就需要先用maven导入jar包：\n\n{% codeblock \"pom.xml\" lang:xml %}\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-mail</artifactId>\n</dependency>\n{% endcodeblock %}\n\n倒入完我们就来编写一下配置文件（核心）：\n\n{% codeblock \"application.yaml\" lang:yaml %}\nspring:\n  mail:\n    # 微软outlook的smtp服务器\n    host: smtp.office365.com\n    username: ********@outlook.com\n    # 由于这里使用微软的outlook，所以password就只需要输入你微软账号(上面的********@outlook.com)的密码就好了\n    password: ********\n    # 端口\n    port: 587\n    # 细节配置\n    properties:\n      mail.smtp.auth: true\n      mail.smtp.starttls.enable: true\n      mail.smtp.starttls.required: true\n{% endcodeblock %}\n\n接下来编写接口，这里就直接写一个get请求的接口用来测试。先写服务层\n\n{% codeblock \"MailService.java\" lang:java %}\n@Service\npublic class MailService {\n\n    @Autowired\n    JavaMailSender sender;\n\n    /**\n     * 发送邮件\n     * @param from 发件人\n     * @param to 收件人\n     * @param subject 邮件主题，标题\n     * @param text 邮件内容\n     */\n    public void sendMail(String from, String to, String subject, String text) {\n        SimpleMailMessage simpleMailMessage = new SimpleMailMessage();\n        simpleMailMessage.setFrom(from);\n        simpleMailMessage.setTo(to);\n        simpleMailMessage.setSubject(subject);\n        simpleMailMessage.setText(text);\n\n        sender.send(simpleMailMessage);\n    }\n\n}\n{% endcodeblock %}\n\n接下来编写控制器层\n\n{% codeblock \"MailService.java\" lang:java %}\n@RestController\npublic class MailController {\n\n    @Autowired\n    MailService service;\n\n    @GetMapping(\"/send\")\n    public String send() {\n        service.sendMail(\n                \"******@outlook.com\",\n                \"******@qq.com\", \n                \"Test\",\n                \"testtesttest\"\n        );\n        return \"success\";\n    }\n\n}\n{% endcodeblock %}\n\n接下来运行测试，进入浏览器访问`http://localhost:8080/send`擦看结果：\n\n![请求成功](/images/spring-mail-success.png)\n\n我们查看收件箱\n\n![邮件内容](/images/mail-success-1.png)\n\n结束，很简单吧。\n","slug":"spring-boot-starter-mail","published":1,"date":"2022-07-06T05:13:12.514Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl59671m6000784uqg4qygbph","content":"<p>就突发奇想，想写一个邮件验证码的功能。这里就先记录一下我的代码（就单纯发个邮件）</p>\n<span id=\"more\"></span>\n\n<p>既然是要用到 springboot 的 email 组件，那就需要先用 maven 导入 jar 包：</p>\n<figure class=\"highlight xml\"><figcaption><span>pom.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-mail<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>倒入完我们就来编写一下配置文件（核心）：</p>\n<figure class=\"highlight yaml\"><figcaption><span>application.yaml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">mail:</span><br>    <span class=\"hljs-comment\"># 微软 outlook 的 smtp 服务器</span><br>    <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">smtp.office365.com</span><br>    <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">********@outlook.com</span><br>    <span class=\"hljs-comment\"># 由于这里使用微软的 outlook，所以 password 就只需要输入你微软账号 (上面的 ********@outlook.com) 的密码就好了</span><br>    <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">********</span><br>    <span class=\"hljs-comment\"># 端口</span><br>    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">587</span><br>    <span class=\"hljs-comment\"># 细节配置</span><br>    <span class=\"hljs-attr\">properties:</span><br>      <span class=\"hljs-attr\">mail.smtp.auth:</span> <span class=\"hljs-literal\">true</span><br>      <span class=\"hljs-attr\">mail.smtp.starttls.enable:</span> <span class=\"hljs-literal\">true</span><br>      <span class=\"hljs-attr\">mail.smtp.starttls.required:</span> <span class=\"hljs-literal\">true</span><br></code></pre></td></tr></table></figure>\n\n<p>接下来编写接口，这里就直接写一个 get 请求的接口用来测试。先写服务层</p>\n<figure class=\"highlight java\"><figcaption><span>MailService.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Service</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MailService</span> &#123;<br><br>    <span class=\"hljs-meta\">@Autowired</span><br>    JavaMailSender sender;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 发送邮件</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> from 发件人</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> to 收件人</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> subject 邮件主题，标题</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> text 邮件内容</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">sendMail</span> <span class=\"hljs-params\">(String from, String to, String subject, String text)</span> &#123;<br>        <span class=\"hljs-type\">SimpleMailMessage</span> <span class=\"hljs-variable\">simpleMailMessage</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SimpleMailMessage</span> ();<br>        simpleMailMessage.setFrom (from);<br>        simpleMailMessage.setTo (to);<br>        simpleMailMessage.setSubject (subject);<br>        simpleMailMessage.setText (text);<br><br>        sender.send (simpleMailMessage);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>接下来编写控制器层</p>\n<figure class=\"highlight java\"><figcaption><span>MailService.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MailController</span> &#123;<br><br>    <span class=\"hljs-meta\">@Autowired</span><br>    MailService service;<br><br>    <span class=\"hljs-meta\">@GetMapping</span> (<span class=\"hljs-string\">&quot;/send&quot;</span>)<br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">send</span> <span class=\"hljs-params\">()</span> &#123;<br>        service.sendMail (<br>                <span class=\"hljs-string\">&quot;******@outlook.com&quot;</span>,<br>                <span class=\"hljs-string\">&quot;******@qq.com&quot;</span>, <br>                <span class=\"hljs-string\">&quot;Test&quot;</span>,<br>                <span class=\"hljs-string\">&quot;testtesttest&quot;</span><br>        );<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;success&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>接下来运行测试，进入浏览器访问 <code>http://localhost:8080/send</code> 擦看结果：</p>\n<p><img src=\"/images/spring-mail-success.png\" alt=\"请求成功\"></p>\n<p>我们查看收件箱</p>\n<p><img src=\"/images/mail-success-1.png\" alt=\"邮件内容\"></p>\n<p>结束，很简单吧。</p>\n","site":{"data":{}},"excerpt":"<p>就突发奇想，想写一个邮件验证码的功能。这里就先记录一下我的代码（就单纯发个邮件）</p>","more":"<p>既然是要用到 springboot 的 email 组件，那就需要先用 maven 导入 jar 包：</p>\n<figure class=\"highlight xml\"><figcaption><span>pom.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-mail<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>倒入完我们就来编写一下配置文件（核心）：</p>\n<figure class=\"highlight yaml\"><figcaption><span>application.yaml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">mail:</span><br>    <span class=\"hljs-comment\"># 微软 outlook 的 smtp 服务器</span><br>    <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">smtp.office365.com</span><br>    <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">********@outlook.com</span><br>    <span class=\"hljs-comment\"># 由于这里使用微软的 outlook，所以 password 就只需要输入你微软账号 (上面的 ********@outlook.com) 的密码就好了</span><br>    <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">********</span><br>    <span class=\"hljs-comment\"># 端口</span><br>    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">587</span><br>    <span class=\"hljs-comment\"># 细节配置</span><br>    <span class=\"hljs-attr\">properties:</span><br>      <span class=\"hljs-attr\">mail.smtp.auth:</span> <span class=\"hljs-literal\">true</span><br>      <span class=\"hljs-attr\">mail.smtp.starttls.enable:</span> <span class=\"hljs-literal\">true</span><br>      <span class=\"hljs-attr\">mail.smtp.starttls.required:</span> <span class=\"hljs-literal\">true</span><br></code></pre></td></tr></table></figure>\n\n<p>接下来编写接口，这里就直接写一个 get 请求的接口用来测试。先写服务层</p>\n<figure class=\"highlight java\"><figcaption><span>MailService.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Service</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MailService</span> &#123;<br><br>    <span class=\"hljs-meta\">@Autowired</span><br>    JavaMailSender sender;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 发送邮件</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> from 发件人</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> to 收件人</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> subject 邮件主题，标题</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> text 邮件内容</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">sendMail</span> <span class=\"hljs-params\">(String from, String to, String subject, String text)</span> &#123;<br>        <span class=\"hljs-type\">SimpleMailMessage</span> <span class=\"hljs-variable\">simpleMailMessage</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SimpleMailMessage</span> ();<br>        simpleMailMessage.setFrom (from);<br>        simpleMailMessage.setTo (to);<br>        simpleMailMessage.setSubject (subject);<br>        simpleMailMessage.setText (text);<br><br>        sender.send (simpleMailMessage);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>接下来编写控制器层</p>\n<figure class=\"highlight java\"><figcaption><span>MailService.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MailController</span> &#123;<br><br>    <span class=\"hljs-meta\">@Autowired</span><br>    MailService service;<br><br>    <span class=\"hljs-meta\">@GetMapping</span> (<span class=\"hljs-string\">&quot;/send&quot;</span>)<br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">send</span> <span class=\"hljs-params\">()</span> &#123;<br>        service.sendMail (<br>                <span class=\"hljs-string\">&quot;******@outlook.com&quot;</span>,<br>                <span class=\"hljs-string\">&quot;******@qq.com&quot;</span>, <br>                <span class=\"hljs-string\">&quot;Test&quot;</span>,<br>                <span class=\"hljs-string\">&quot;testtesttest&quot;</span><br>        );<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;success&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>接下来运行测试，进入浏览器访问 <code>http://localhost:8080/send</code> 擦看结果：</p>\n<p><img src=\"/images/spring-mail-success.png\" alt=\"请求成功\"></p>\n<p>我们查看收件箱</p>\n<p><img src=\"/images/mail-success-1.png\" alt=\"邮件内容\"></p>\n<p>结束，很简单吧。</p>"},{"title":"Z-Chat 项目笔记 (一)","cover":"/covers/GOSTBLADE2.png","updated":"2022-06-30T01:50:22.000Z","id":"3","toc":true,"_content":"暑假了，想给自己找点事情干。所以就计划开发一个类似于微信的程序（swing，springboot，mybatis，vue-element-admin）。\n\n<!-- more -->\n\n此项目未单人开发，锻炼个人能力。\n\n# 需求分析\n\n首先是需求分析。\n![需求分析](/images/z-chat-1-demand.png)\n这里分成了5个模块，根据这些需求。决定使用以下技术栈：`springboot，mybatis，redis，mysql，springdata，vue-element-admin，java-swing`\n\n**redis**是为了实现未读消息的数量，方便高频读写。而**mysql**就是传统的用法，**swing**用来作桌面端应用程序，**vue-element-admin**是用于web管理页面。其他的就不解释了。\n","source":"_posts/z-chat-1.md","raw":"---\ntitle: Z-Chat项目笔记(一)\ncover: /covers/GOSTBLADE2.png\nupdated: 2022-06-30 09:50:22\nid: 000003\ncategories:\n- project\ntags:\n- 项目\ntoc: true\n---\n暑假了，想给自己找点事情干。所以就计划开发一个类似于微信的程序（swing，springboot，mybatis，vue-element-admin）。\n\n<!-- more -->\n\n此项目未单人开发，锻炼个人能力。\n\n# 需求分析\n\n首先是需求分析。\n![需求分析](/images/z-chat-1-demand.png)\n这里分成了5个模块，根据这些需求。决定使用以下技术栈：`springboot，mybatis，redis，mysql，springdata，vue-element-admin，java-swing`\n\n**redis**是为了实现未读消息的数量，方便高频读写。而**mysql**就是传统的用法，**swing**用来作桌面端应用程序，**vue-element-admin**是用于web管理页面。其他的就不解释了。\n","slug":"z-chat-1","published":1,"date":"2022-06-30T01:47:25.690Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl59671m7000884uq7cjnheyo","content":"<p>暑假了，想给自己找点事情干。所以就计划开发一个类似于微信的程序（swing，springboot，mybatis，vue-element-admin）。</p>\n<span id=\"more\"></span>\n\n<p>此项目未单人开发，锻炼个人能力。</p>\n<h1 id=\"需求分析\"><a href=\"#需求分析\" class=\"headerlink\" title=\"需求分析\"></a>需求分析</h1><p>首先是需求分析。<br><img src=\"/images/z-chat-1-demand.png\" alt=\"需求分析\"><br>这里分成了 5 个模块，根据这些需求。决定使用以下技术栈：<code>springboot，mybatis，redis，mysql，springdata，vue-element-admin，java-swing</code></p>\n<p><strong>redis</strong> 是为了实现未读消息的数量，方便高频读写。而 <strong>mysql</strong> 就是传统的用法，<strong>swing</strong> 用来作桌面端应用程序，<strong>vue-element-admin</strong> 是用于 web 管理页面。其他的就不解释了。</p>\n","site":{"data":{}},"excerpt":"<p>暑假了，想给自己找点事情干。所以就计划开发一个类似于微信的程序（swing，springboot，mybatis，vue-element-admin）。</p>","more":"<p>此项目未单人开发，锻炼个人能力。</p>\n<h1 id=\"需求分析\"><a href=\"#需求分析\" class=\"headerlink\" title=\"需求分析\"></a>需求分析</h1><p>首先是需求分析。<br><img src=\"/images/z-chat-1-demand.png\" alt=\"需求分析\"><br>这里分成了 5 个模块，根据这些需求。决定使用以下技术栈：<code>springboot，mybatis，redis，mysql，springdata，vue-element-admin，java-swing</code></p>\n<p><strong>redis</strong> 是为了实现未读消息的数量，方便高频读写。而 <strong>mysql</strong> 就是传统的用法，<strong>swing</strong> 用来作桌面端应用程序，<strong>vue-element-admin</strong> 是用于 web 管理页面。其他的就不解释了。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cl59671ly000184uqhix2gzxf","category_id":"cl59671m3000484uqch9y71ph","_id":"cl59671m9000c84uqckoicrk7"},{"post_id":"cl59671m1000384uqf8x8b6po","category_id":"cl59671m8000984uq5mtw9ccq","_id":"cl59671mf000g84uqhihfcmpi"},{"post_id":"cl59671m6000784uqg4qygbph","category_id":"cl59671m8000984uq5mtw9ccq","_id":"cl59671mh000j84uq86w7awgp"},{"post_id":"cl59671m7000884uq7cjnheyo","category_id":"cl59671mf000f84uq7dyi0mok","_id":"cl59671mi000n84uqcqjbe0um"}],"PostTag":[{"post_id":"cl59671ly000184uqhix2gzxf","tag_id":"cl59671m5000584uqfm9nagpd","_id":"cl59671m9000b84uqfkjg0oy8"},{"post_id":"cl59671m1000384uqf8x8b6po","tag_id":"cl59671m8000a84uq2oer7758","_id":"cl59671mh000i84uq823df9oi"},{"post_id":"cl59671m1000384uqf8x8b6po","tag_id":"cl59671m9000e84uq0xuc0266","_id":"cl59671mh000k84uq56fggk7i"},{"post_id":"cl59671m6000784uqg4qygbph","tag_id":"cl59671m9000e84uq0xuc0266","_id":"cl59671mh000m84uq8junhjz8"},{"post_id":"cl59671m7000884uq7cjnheyo","tag_id":"cl59671mh000l84uq255fchh4","_id":"cl59671mi000o84uq8lkj2nys"}],"Tag":[{"name":"运维","_id":"cl59671m5000584uqfm9nagpd"},{"name":"elasticsearch","_id":"cl59671m8000a84uq2oer7758"},{"name":"springboot","_id":"cl59671m9000e84uq0xuc0266"},{"name":"项目","_id":"cl59671mh000l84uq255fchh4"}]}}